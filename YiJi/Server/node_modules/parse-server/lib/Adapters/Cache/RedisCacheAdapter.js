'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RedisCacheAdapter = undefined;

var _redis = require('redis');

var _redis2 = _interopRequireDefault(_redis);

var _logger = require('../../logger');

var _logger2 = _interopRequireDefault(_logger);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const DEFAULT_REDIS_TTL = 30 * 1000; // 30 seconds in milliseconds

function debug() {
  _logger2.default.debug.apply(_logger2.default, ['RedisCacheAdapter', ...arguments]);
}

class RedisCacheAdapter {

  constructor(redisCtx, ttl = DEFAULT_REDIS_TTL) {
    this.client = _redis2.default.createClient(redisCtx);
    this.p = Promise.resolve();
    this.ttl = ttl;
  }

  get(key) {
    debug('get', key);
    this.p = this.p.then(() => {
      return new Promise(resolve => {
        this.client.get(key, function (err, res) {
          debug('-> get', key, res);
          if (!res) {
            return resolve(null);
          }
          resolve(JSON.parse(res));
        });
      });
    });
    return this.p;
  }

  put(key, value, ttl = this.ttl) {
    value = JSON.stringify(value);
    debug('put', key, value, ttl);
    if (ttl === 0) {
      return this.p; // ttl of zero is a logical no-op, but redis cannot set expire time of zero
    }
    if (ttl < 0 || isNaN(ttl)) {
      ttl = DEFAULT_REDIS_TTL;
    }
    this.p = this.p.then(() => {
      return new Promise(resolve => {
        if (ttl === Infinity) {
          this.client.set(key, value, function () {
            resolve();
          });
        } else {
          this.client.psetex(key, ttl, value, function () {
            resolve();
          });
        }
      });
    });
    return this.p;
  }

  del(key) {
    debug('del', key);
    this.p = this.p.then(() => {
      return new Promise(resolve => {
        this.client.del(key, function () {
          resolve();
        });
      });
    });
    return this.p;
  }

  clear() {
    debug('clear');
    this.p = this.p.then(() => {
      return new Promise(resolve => {
        this.client.flushdb(function () {
          resolve();
        });
      });
    });
    return this.p;
  }
}

exports.RedisCacheAdapter = RedisCacheAdapter;
exports.default = RedisCacheAdapter;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9BZGFwdGVycy9DYWNoZS9SZWRpc0NhY2hlQWRhcHRlci5qcyJdLCJuYW1lcyI6WyJERUZBVUxUX1JFRElTX1RUTCIsImRlYnVnIiwibG9nZ2VyIiwiYXBwbHkiLCJhcmd1bWVudHMiLCJSZWRpc0NhY2hlQWRhcHRlciIsImNvbnN0cnVjdG9yIiwicmVkaXNDdHgiLCJ0dGwiLCJjbGllbnQiLCJyZWRpcyIsImNyZWF0ZUNsaWVudCIsInAiLCJQcm9taXNlIiwicmVzb2x2ZSIsImdldCIsImtleSIsInRoZW4iLCJlcnIiLCJyZXMiLCJKU09OIiwicGFyc2UiLCJwdXQiLCJ2YWx1ZSIsInN0cmluZ2lmeSIsImlzTmFOIiwiSW5maW5pdHkiLCJzZXQiLCJwc2V0ZXgiLCJkZWwiLCJjbGVhciIsImZsdXNoZGIiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7OztBQUNBOzs7Ozs7QUFFQSxNQUFNQSxvQkFBb0IsS0FBSyxJQUEvQixDLENBQXFDOztBQUVyQyxTQUFTQyxLQUFULEdBQWlCO0FBQ2ZDLG1CQUFPRCxLQUFQLENBQWFFLEtBQWIsQ0FBbUJELGdCQUFuQixFQUEyQixDQUFDLG1CQUFELEVBQXNCLEdBQUdFLFNBQXpCLENBQTNCO0FBQ0Q7O0FBRU0sTUFBTUMsaUJBQU4sQ0FBd0I7O0FBRTdCQyxjQUFZQyxRQUFaLEVBQXNCQyxNQUFNUixpQkFBNUIsRUFBK0M7QUFDN0MsU0FBS1MsTUFBTCxHQUFjQyxnQkFBTUMsWUFBTixDQUFtQkosUUFBbkIsQ0FBZDtBQUNBLFNBQUtLLENBQUwsR0FBU0MsUUFBUUMsT0FBUixFQUFUO0FBQ0EsU0FBS04sR0FBTCxHQUFXQSxHQUFYO0FBQ0Q7O0FBRURPLE1BQUlDLEdBQUosRUFBUztBQUNQZixVQUFNLEtBQU4sRUFBYWUsR0FBYjtBQUNBLFNBQUtKLENBQUwsR0FBUyxLQUFLQSxDQUFMLENBQU9LLElBQVAsQ0FBWSxNQUFNO0FBQ3pCLGFBQU8sSUFBSUosT0FBSixDQUFhQyxPQUFELElBQWE7QUFDOUIsYUFBS0wsTUFBTCxDQUFZTSxHQUFaLENBQWdCQyxHQUFoQixFQUFxQixVQUFTRSxHQUFULEVBQWNDLEdBQWQsRUFBbUI7QUFDdENsQixnQkFBTSxRQUFOLEVBQWdCZSxHQUFoQixFQUFxQkcsR0FBckI7QUFDQSxjQUFHLENBQUNBLEdBQUosRUFBUztBQUNQLG1CQUFPTCxRQUFRLElBQVIsQ0FBUDtBQUNEO0FBQ0RBLGtCQUFRTSxLQUFLQyxLQUFMLENBQVdGLEdBQVgsQ0FBUjtBQUNELFNBTkQ7QUFPRCxPQVJNLENBQVA7QUFTRCxLQVZRLENBQVQ7QUFXQSxXQUFPLEtBQUtQLENBQVo7QUFDRDs7QUFFRFUsTUFBSU4sR0FBSixFQUFTTyxLQUFULEVBQWdCZixNQUFNLEtBQUtBLEdBQTNCLEVBQWdDO0FBQzlCZSxZQUFRSCxLQUFLSSxTQUFMLENBQWVELEtBQWYsQ0FBUjtBQUNBdEIsVUFBTSxLQUFOLEVBQWFlLEdBQWIsRUFBa0JPLEtBQWxCLEVBQXlCZixHQUF6QjtBQUNBLFFBQUlBLFFBQVEsQ0FBWixFQUFlO0FBQ2IsYUFBTyxLQUFLSSxDQUFaLENBRGEsQ0FDRTtBQUNoQjtBQUNELFFBQUlKLE1BQU0sQ0FBTixJQUFXaUIsTUFBTWpCLEdBQU4sQ0FBZixFQUEyQjtBQUN6QkEsWUFBTVIsaUJBQU47QUFDRDtBQUNELFNBQUtZLENBQUwsR0FBUyxLQUFLQSxDQUFMLENBQU9LLElBQVAsQ0FBWSxNQUFNO0FBQ3pCLGFBQU8sSUFBSUosT0FBSixDQUFhQyxPQUFELElBQWE7QUFDOUIsWUFBSU4sUUFBUWtCLFFBQVosRUFBc0I7QUFDcEIsZUFBS2pCLE1BQUwsQ0FBWWtCLEdBQVosQ0FBZ0JYLEdBQWhCLEVBQXFCTyxLQUFyQixFQUE0QixZQUFXO0FBQ3JDVDtBQUNELFdBRkQ7QUFHRCxTQUpELE1BSU87QUFDTCxlQUFLTCxNQUFMLENBQVltQixNQUFaLENBQW1CWixHQUFuQixFQUF3QlIsR0FBeEIsRUFBNkJlLEtBQTdCLEVBQW9DLFlBQVc7QUFDN0NUO0FBQ0QsV0FGRDtBQUdEO0FBQ0YsT0FWTSxDQUFQO0FBV0QsS0FaUSxDQUFUO0FBYUEsV0FBTyxLQUFLRixDQUFaO0FBQ0Q7O0FBRURpQixNQUFJYixHQUFKLEVBQVM7QUFDUGYsVUFBTSxLQUFOLEVBQWFlLEdBQWI7QUFDQSxTQUFLSixDQUFMLEdBQVMsS0FBS0EsQ0FBTCxDQUFPSyxJQUFQLENBQVksTUFBTTtBQUN6QixhQUFPLElBQUlKLE9BQUosQ0FBYUMsT0FBRCxJQUFhO0FBQzlCLGFBQUtMLE1BQUwsQ0FBWW9CLEdBQVosQ0FBZ0JiLEdBQWhCLEVBQXFCLFlBQVc7QUFDOUJGO0FBQ0QsU0FGRDtBQUdELE9BSk0sQ0FBUDtBQUtELEtBTlEsQ0FBVDtBQU9BLFdBQU8sS0FBS0YsQ0FBWjtBQUNEOztBQUVEa0IsVUFBUTtBQUNON0IsVUFBTSxPQUFOO0FBQ0EsU0FBS1csQ0FBTCxHQUFTLEtBQUtBLENBQUwsQ0FBT0ssSUFBUCxDQUFZLE1BQU07QUFDekIsYUFBTyxJQUFJSixPQUFKLENBQWFDLE9BQUQsSUFBYTtBQUM5QixhQUFLTCxNQUFMLENBQVlzQixPQUFaLENBQW9CLFlBQVc7QUFDN0JqQjtBQUNELFNBRkQ7QUFHRCxPQUpNLENBQVA7QUFLRCxLQU5RLENBQVQ7QUFPQSxXQUFPLEtBQUtGLENBQVo7QUFDRDtBQXZFNEI7O1FBQWxCUCxpQixHQUFBQSxpQjtrQkEwRUVBLGlCIiwiZmlsZSI6IlJlZGlzQ2FjaGVBZGFwdGVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHJlZGlzIGZyb20gJ3JlZGlzJztcbmltcG9ydCBsb2dnZXIgZnJvbSAnLi4vLi4vbG9nZ2VyJztcblxuY29uc3QgREVGQVVMVF9SRURJU19UVEwgPSAzMCAqIDEwMDA7IC8vIDMwIHNlY29uZHMgaW4gbWlsbGlzZWNvbmRzXG5cbmZ1bmN0aW9uIGRlYnVnKCkge1xuICBsb2dnZXIuZGVidWcuYXBwbHkobG9nZ2VyLCBbJ1JlZGlzQ2FjaGVBZGFwdGVyJywgLi4uYXJndW1lbnRzXSk7XG59XG5cbmV4cG9ydCBjbGFzcyBSZWRpc0NhY2hlQWRhcHRlciB7XG5cbiAgY29uc3RydWN0b3IocmVkaXNDdHgsIHR0bCA9IERFRkFVTFRfUkVESVNfVFRMKSB7XG4gICAgdGhpcy5jbGllbnQgPSByZWRpcy5jcmVhdGVDbGllbnQocmVkaXNDdHgpO1xuICAgIHRoaXMucCA9IFByb21pc2UucmVzb2x2ZSgpO1xuICAgIHRoaXMudHRsID0gdHRsO1xuICB9XG5cbiAgZ2V0KGtleSkge1xuICAgIGRlYnVnKCdnZXQnLCBrZXkpO1xuICAgIHRoaXMucCA9IHRoaXMucC50aGVuKCgpID0+IHtcbiAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuICAgICAgICB0aGlzLmNsaWVudC5nZXQoa2V5LCBmdW5jdGlvbihlcnIsIHJlcykge1xuICAgICAgICAgIGRlYnVnKCctPiBnZXQnLCBrZXksIHJlcyk7XG4gICAgICAgICAgaWYoIXJlcykge1xuICAgICAgICAgICAgcmV0dXJuIHJlc29sdmUobnVsbCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJlc29sdmUoSlNPTi5wYXJzZShyZXMpKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICByZXR1cm4gdGhpcy5wO1xuICB9XG5cbiAgcHV0KGtleSwgdmFsdWUsIHR0bCA9IHRoaXMudHRsKSB7XG4gICAgdmFsdWUgPSBKU09OLnN0cmluZ2lmeSh2YWx1ZSk7XG4gICAgZGVidWcoJ3B1dCcsIGtleSwgdmFsdWUsIHR0bCk7XG4gICAgaWYgKHR0bCA9PT0gMCkge1xuICAgICAgcmV0dXJuIHRoaXMucDsgLy8gdHRsIG9mIHplcm8gaXMgYSBsb2dpY2FsIG5vLW9wLCBidXQgcmVkaXMgY2Fubm90IHNldCBleHBpcmUgdGltZSBvZiB6ZXJvXG4gICAgfVxuICAgIGlmICh0dGwgPCAwIHx8IGlzTmFOKHR0bCkpIHtcbiAgICAgIHR0bCA9IERFRkFVTFRfUkVESVNfVFRMO1xuICAgIH1cbiAgICB0aGlzLnAgPSB0aGlzLnAudGhlbigoKSA9PiB7XG4gICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcbiAgICAgICAgaWYgKHR0bCA9PT0gSW5maW5pdHkpIHtcbiAgICAgICAgICB0aGlzLmNsaWVudC5zZXQoa2V5LCB2YWx1ZSwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5jbGllbnQucHNldGV4KGtleSwgdHRsLCB2YWx1ZSwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIHJldHVybiB0aGlzLnA7XG4gIH1cblxuICBkZWwoa2V5KSB7XG4gICAgZGVidWcoJ2RlbCcsIGtleSk7XG4gICAgdGhpcy5wID0gdGhpcy5wLnRoZW4oKCkgPT4ge1xuICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgICAgIHRoaXMuY2xpZW50LmRlbChrZXksIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICByZXR1cm4gdGhpcy5wO1xuICB9XG5cbiAgY2xlYXIoKSB7XG4gICAgZGVidWcoJ2NsZWFyJyk7XG4gICAgdGhpcy5wID0gdGhpcy5wLnRoZW4oKCkgPT4ge1xuICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgICAgIHRoaXMuY2xpZW50LmZsdXNoZGIoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIHJldHVybiB0aGlzLnA7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgUmVkaXNDYWNoZUFkYXB0ZXI7XG4iXX0=