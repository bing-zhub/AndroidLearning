'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LiveQueryController = undefined;

var _ParseCloudCodePublisher = require('../LiveQuery/ParseCloudCodePublisher');

var _Options = require('../Options');

class LiveQueryController {

  constructor(config) {
    // If config is empty, we just assume no classs needs to be registered as LiveQuery
    if (!config || !config.classNames) {
      this.classNames = new Set();
    } else if (config.classNames instanceof Array) {
      this.classNames = new Set(config.classNames);
    } else {
      throw 'liveQuery.classes should be an array of string';
    }
    this.liveQueryPublisher = new _ParseCloudCodePublisher.ParseCloudCodePublisher(config);
  }

  onAfterSave(className, currentObject, originalObject) {
    if (!this.hasLiveQuery(className)) {
      return;
    }
    const req = this._makePublisherRequest(currentObject, originalObject);
    this.liveQueryPublisher.onCloudCodeAfterSave(req);
  }

  onAfterDelete(className, currentObject, originalObject) {
    if (!this.hasLiveQuery(className)) {
      return;
    }
    const req = this._makePublisherRequest(currentObject, originalObject);
    this.liveQueryPublisher.onCloudCodeAfterDelete(req);
  }

  hasLiveQuery(className) {
    return this.classNames.has(className);
  }

  _makePublisherRequest(currentObject, originalObject) {
    const req = {
      object: currentObject
    };
    if (currentObject) {
      req.original = originalObject;
    }
    return req;
  }
}

exports.LiveQueryController = LiveQueryController;
exports.default = LiveQueryController;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9Db250cm9sbGVycy9MaXZlUXVlcnlDb250cm9sbGVyLmpzIl0sIm5hbWVzIjpbIkxpdmVRdWVyeUNvbnRyb2xsZXIiLCJjb25zdHJ1Y3RvciIsImNvbmZpZyIsImNsYXNzTmFtZXMiLCJTZXQiLCJBcnJheSIsImxpdmVRdWVyeVB1Ymxpc2hlciIsIlBhcnNlQ2xvdWRDb2RlUHVibGlzaGVyIiwib25BZnRlclNhdmUiLCJjbGFzc05hbWUiLCJjdXJyZW50T2JqZWN0Iiwib3JpZ2luYWxPYmplY3QiLCJoYXNMaXZlUXVlcnkiLCJyZXEiLCJfbWFrZVB1Ymxpc2hlclJlcXVlc3QiLCJvbkNsb3VkQ29kZUFmdGVyU2F2ZSIsIm9uQWZ0ZXJEZWxldGUiLCJvbkNsb3VkQ29kZUFmdGVyRGVsZXRlIiwiaGFzIiwib2JqZWN0Iiwib3JpZ2luYWwiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDTyxNQUFNQSxtQkFBTixDQUEwQjs7QUFJL0JDLGNBQVlDLE1BQVosRUFBdUM7QUFDckM7QUFDQSxRQUFJLENBQUNBLE1BQUQsSUFBVyxDQUFDQSxPQUFPQyxVQUF2QixFQUFtQztBQUNqQyxXQUFLQSxVQUFMLEdBQWtCLElBQUlDLEdBQUosRUFBbEI7QUFDRCxLQUZELE1BRU8sSUFBSUYsT0FBT0MsVUFBUCxZQUE2QkUsS0FBakMsRUFBd0M7QUFDN0MsV0FBS0YsVUFBTCxHQUFrQixJQUFJQyxHQUFKLENBQVFGLE9BQU9DLFVBQWYsQ0FBbEI7QUFDRCxLQUZNLE1BRUE7QUFDTCxZQUFNLGdEQUFOO0FBQ0Q7QUFDRCxTQUFLRyxrQkFBTCxHQUEwQixJQUFJQyxnREFBSixDQUE0QkwsTUFBNUIsQ0FBMUI7QUFDRDs7QUFFRE0sY0FBWUMsU0FBWixFQUErQkMsYUFBL0IsRUFBbURDLGNBQW5ELEVBQXdFO0FBQ3RFLFFBQUksQ0FBQyxLQUFLQyxZQUFMLENBQWtCSCxTQUFsQixDQUFMLEVBQW1DO0FBQ2pDO0FBQ0Q7QUFDRCxVQUFNSSxNQUFNLEtBQUtDLHFCQUFMLENBQTJCSixhQUEzQixFQUEwQ0MsY0FBMUMsQ0FBWjtBQUNBLFNBQUtMLGtCQUFMLENBQXdCUyxvQkFBeEIsQ0FBNkNGLEdBQTdDO0FBQ0Q7O0FBRURHLGdCQUFjUCxTQUFkLEVBQWlDQyxhQUFqQyxFQUFxREMsY0FBckQsRUFBMEU7QUFDeEUsUUFBSSxDQUFDLEtBQUtDLFlBQUwsQ0FBa0JILFNBQWxCLENBQUwsRUFBbUM7QUFDakM7QUFDRDtBQUNELFVBQU1JLE1BQU0sS0FBS0MscUJBQUwsQ0FBMkJKLGFBQTNCLEVBQTBDQyxjQUExQyxDQUFaO0FBQ0EsU0FBS0wsa0JBQUwsQ0FBd0JXLHNCQUF4QixDQUErQ0osR0FBL0M7QUFDRDs7QUFFREQsZUFBYUgsU0FBYixFQUF5QztBQUN2QyxXQUFPLEtBQUtOLFVBQUwsQ0FBZ0JlLEdBQWhCLENBQW9CVCxTQUFwQixDQUFQO0FBQ0Q7O0FBRURLLHdCQUFzQkosYUFBdEIsRUFBMENDLGNBQTFDLEVBQW9FO0FBQ2xFLFVBQU1FLE1BQU07QUFDVk0sY0FBUVQ7QUFERSxLQUFaO0FBR0EsUUFBSUEsYUFBSixFQUFtQjtBQUNqQkcsVUFBSU8sUUFBSixHQUFlVCxjQUFmO0FBQ0Q7QUFDRCxXQUFPRSxHQUFQO0FBQ0Q7QUE1QzhCOztRQUFwQmIsbUIsR0FBQUEsbUI7a0JBK0NFQSxtQiIsImZpbGUiOiJMaXZlUXVlcnlDb250cm9sbGVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGFyc2VDbG91ZENvZGVQdWJsaXNoZXIgfSBmcm9tICcuLi9MaXZlUXVlcnkvUGFyc2VDbG91ZENvZGVQdWJsaXNoZXInO1xuaW1wb3J0IHsgTGl2ZVF1ZXJ5T3B0aW9ucyB9IGZyb20gJy4uL09wdGlvbnMnO1xuZXhwb3J0IGNsYXNzIExpdmVRdWVyeUNvbnRyb2xsZXIge1xuICBjbGFzc05hbWVzOiBhbnk7XG4gIGxpdmVRdWVyeVB1Ymxpc2hlcjogYW55O1xuXG4gIGNvbnN0cnVjdG9yKGNvbmZpZzogP0xpdmVRdWVyeU9wdGlvbnMpIHtcbiAgICAvLyBJZiBjb25maWcgaXMgZW1wdHksIHdlIGp1c3QgYXNzdW1lIG5vIGNsYXNzcyBuZWVkcyB0byBiZSByZWdpc3RlcmVkIGFzIExpdmVRdWVyeVxuICAgIGlmICghY29uZmlnIHx8ICFjb25maWcuY2xhc3NOYW1lcykge1xuICAgICAgdGhpcy5jbGFzc05hbWVzID0gbmV3IFNldCgpO1xuICAgIH0gZWxzZSBpZiAoY29uZmlnLmNsYXNzTmFtZXMgaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgdGhpcy5jbGFzc05hbWVzID0gbmV3IFNldChjb25maWcuY2xhc3NOYW1lcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93ICdsaXZlUXVlcnkuY2xhc3NlcyBzaG91bGQgYmUgYW4gYXJyYXkgb2Ygc3RyaW5nJ1xuICAgIH1cbiAgICB0aGlzLmxpdmVRdWVyeVB1Ymxpc2hlciA9IG5ldyBQYXJzZUNsb3VkQ29kZVB1Ymxpc2hlcihjb25maWcpO1xuICB9XG5cbiAgb25BZnRlclNhdmUoY2xhc3NOYW1lOiBzdHJpbmcsIGN1cnJlbnRPYmplY3Q6IGFueSwgb3JpZ2luYWxPYmplY3Q6IGFueSkge1xuICAgIGlmICghdGhpcy5oYXNMaXZlUXVlcnkoY2xhc3NOYW1lKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCByZXEgPSB0aGlzLl9tYWtlUHVibGlzaGVyUmVxdWVzdChjdXJyZW50T2JqZWN0LCBvcmlnaW5hbE9iamVjdCk7XG4gICAgdGhpcy5saXZlUXVlcnlQdWJsaXNoZXIub25DbG91ZENvZGVBZnRlclNhdmUocmVxKTtcbiAgfVxuXG4gIG9uQWZ0ZXJEZWxldGUoY2xhc3NOYW1lOiBzdHJpbmcsIGN1cnJlbnRPYmplY3Q6IGFueSwgb3JpZ2luYWxPYmplY3Q6IGFueSkge1xuICAgIGlmICghdGhpcy5oYXNMaXZlUXVlcnkoY2xhc3NOYW1lKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCByZXEgPSB0aGlzLl9tYWtlUHVibGlzaGVyUmVxdWVzdChjdXJyZW50T2JqZWN0LCBvcmlnaW5hbE9iamVjdCk7XG4gICAgdGhpcy5saXZlUXVlcnlQdWJsaXNoZXIub25DbG91ZENvZGVBZnRlckRlbGV0ZShyZXEpO1xuICB9XG5cbiAgaGFzTGl2ZVF1ZXJ5KGNsYXNzTmFtZTogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuY2xhc3NOYW1lcy5oYXMoY2xhc3NOYW1lKTtcbiAgfVxuXG4gIF9tYWtlUHVibGlzaGVyUmVxdWVzdChjdXJyZW50T2JqZWN0OiBhbnksIG9yaWdpbmFsT2JqZWN0OiBhbnkpOiBhbnkge1xuICAgIGNvbnN0IHJlcSA9IHtcbiAgICAgIG9iamVjdDogY3VycmVudE9iamVjdFxuICAgIH07XG4gICAgaWYgKGN1cnJlbnRPYmplY3QpIHtcbiAgICAgIHJlcS5vcmlnaW5hbCA9IG9yaWdpbmFsT2JqZWN0O1xuICAgIH1cbiAgICByZXR1cm4gcmVxO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IExpdmVRdWVyeUNvbnRyb2xsZXI7XG4iXX0=