"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _cryptoUtils = require("../cryptoUtils");

var _defaults = require("../defaults");

var _defaults2 = _interopRequireDefault(_defaults);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const MAIN_SCHEMA = "__MAIN_SCHEMA";
const SCHEMA_CACHE_PREFIX = "__SCHEMA";
const ALL_KEYS = "__ALL_KEYS";

class SchemaCache {

  constructor(cacheController, ttl = _defaults2.default.schemaCacheTTL, singleCache = false) {
    this.ttl = ttl;
    if (typeof ttl == 'string') {
      this.ttl = parseInt(ttl);
    }
    this.cache = cacheController;
    this.prefix = SCHEMA_CACHE_PREFIX;
    if (!singleCache) {
      this.prefix += (0, _cryptoUtils.randomString)(20);
    }
  }

  put(key, value) {
    return this.cache.get(this.prefix + ALL_KEYS).then(allKeys => {
      allKeys = allKeys || {};
      allKeys[key] = true;
      return Promise.all([this.cache.put(this.prefix + ALL_KEYS, allKeys, this.ttl), this.cache.put(key, value, this.ttl)]);
    });
  }

  getAllClasses() {
    if (!this.ttl) {
      return Promise.resolve(null);
    }
    return this.cache.get(this.prefix + MAIN_SCHEMA);
  }

  setAllClasses(schema) {
    if (!this.ttl) {
      return Promise.resolve(null);
    }
    return this.put(this.prefix + MAIN_SCHEMA, schema);
  }

  setOneSchema(className, schema) {
    if (!this.ttl) {
      return Promise.resolve(null);
    }
    return this.put(this.prefix + className, schema);
  }

  getOneSchema(className) {
    if (!this.ttl) {
      return Promise.resolve(null);
    }
    return this.cache.get(this.prefix + className).then(schema => {
      if (schema) {
        return Promise.resolve(schema);
      }
      return this.cache.get(this.prefix + MAIN_SCHEMA).then(cachedSchemas => {
        cachedSchemas = cachedSchemas || [];
        schema = cachedSchemas.find(cachedSchema => {
          return cachedSchema.className === className;
        });
        if (schema) {
          return Promise.resolve(schema);
        }
        return Promise.resolve(null);
      });
    });
  }

  clear() {
    // That clears all caches...
    return this.cache.get(this.prefix + ALL_KEYS).then(allKeys => {
      if (!allKeys) {
        return;
      }
      const promises = Object.keys(allKeys).map(key => {
        return this.cache.del(key);
      });
      return Promise.all(promises);
    });
  }
}
exports.default = SchemaCache;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9Db250cm9sbGVycy9TY2hlbWFDYWNoZS5qcyJdLCJuYW1lcyI6WyJNQUlOX1NDSEVNQSIsIlNDSEVNQV9DQUNIRV9QUkVGSVgiLCJBTExfS0VZUyIsIlNjaGVtYUNhY2hlIiwiY29uc3RydWN0b3IiLCJjYWNoZUNvbnRyb2xsZXIiLCJ0dGwiLCJkZWZhdWx0cyIsInNjaGVtYUNhY2hlVFRMIiwic2luZ2xlQ2FjaGUiLCJwYXJzZUludCIsImNhY2hlIiwicHJlZml4IiwicHV0Iiwia2V5IiwidmFsdWUiLCJnZXQiLCJ0aGVuIiwiYWxsS2V5cyIsIlByb21pc2UiLCJhbGwiLCJnZXRBbGxDbGFzc2VzIiwicmVzb2x2ZSIsInNldEFsbENsYXNzZXMiLCJzY2hlbWEiLCJzZXRPbmVTY2hlbWEiLCJjbGFzc05hbWUiLCJnZXRPbmVTY2hlbWEiLCJjYWNoZWRTY2hlbWFzIiwiZmluZCIsImNhY2hlZFNjaGVtYSIsImNsZWFyIiwicHJvbWlzZXMiLCJPYmplY3QiLCJrZXlzIiwibWFwIiwiZGVsIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFJQTs7QUFDQTs7Ozs7O0FBTEEsTUFBTUEsY0FBYyxlQUFwQjtBQUNBLE1BQU1DLHNCQUFzQixVQUE1QjtBQUNBLE1BQU1DLFdBQVcsWUFBakI7O0FBS2UsTUFBTUMsV0FBTixDQUFrQjs7QUFHL0JDLGNBQVlDLGVBQVosRUFBNkJDLE1BQU1DLG1CQUFTQyxjQUE1QyxFQUE0REMsY0FBYyxLQUExRSxFQUFpRjtBQUMvRSxTQUFLSCxHQUFMLEdBQVdBLEdBQVg7QUFDQSxRQUFJLE9BQU9BLEdBQVAsSUFBYyxRQUFsQixFQUE0QjtBQUMxQixXQUFLQSxHQUFMLEdBQVdJLFNBQVNKLEdBQVQsQ0FBWDtBQUNEO0FBQ0QsU0FBS0ssS0FBTCxHQUFhTixlQUFiO0FBQ0EsU0FBS08sTUFBTCxHQUFjWCxtQkFBZDtBQUNBLFFBQUksQ0FBQ1EsV0FBTCxFQUFrQjtBQUNoQixXQUFLRyxNQUFMLElBQWUsK0JBQWEsRUFBYixD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LENBQWV0QixHQUFmLENBQVA7QUFDRCxPQUZnQixDQUFqQjtBQUdBLGFBQU9LLFFBQVFDLEdBQVIsQ0FBWVksUUFBWixDQUFQO0FBQ0QsS0FSTSxDQUFQO0FBU0Q7QUE1RThCO2tCQUFaN0IsVyIsImZpbGUiOiJTY2hlbWFDYWNoZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IE1BSU5fU0NIRU1BID0gXCJfX01BSU5fU0NIRU1BXCI7XG5jb25zdCBTQ0hFTUFfQ0FDSEVfUFJFRklYID0gXCJfX1NDSEVNQVwiO1xuY29uc3QgQUxMX0tFWVMgPSBcIl9fQUxMX0tFWVNcIjtcblxuaW1wb3J0IHsgcmFuZG9tU3RyaW5nIH0gZnJvbSAnLi4vY3J5cHRvVXRpbHMnO1xuaW1wb3J0IGRlZmF1bHRzIGZyb20gJy4uL2RlZmF1bHRzJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2NoZW1hQ2FjaGUge1xuICBjYWNoZTogT2JqZWN0O1xuXG4gIGNvbnN0cnVjdG9yKGNhY2hlQ29udHJvbGxlciwgdHRsID0gZGVmYXVsdHMuc2NoZW1hQ2FjaGVUVEwsIHNpbmdsZUNhY2hlID0gZmFsc2UpIHtcbiAgICB0aGlzLnR0bCA9IHR0bDtcbiAgICBpZiAodHlwZW9mIHR0bCA9PSAnc3RyaW5nJykge1xuICAgICAgdGhpcy50dGwgPSBwYXJzZUludCh0dGwpO1xuICAgIH1cbiAgICB0aGlzLmNhY2hlID0gY2FjaGVDb250cm9sbGVyO1xuICAgIHRoaXMucHJlZml4ID0gU0NIRU1BX0NBQ0hFX1BSRUZJWDtcbiAgICBpZiAoIXNpbmdsZUNhY2hlKSB7XG4gICAgICB0aGlzLnByZWZpeCArPSByYW5kb21TdHJpbmcoMjApO1xuICAgIH1cbiAgfVxuXG4gIHB1dChrZXksIHZhbHVlKSB7XG4gICAgcmV0dXJuIHRoaXMuY2FjaGUuZ2V0KHRoaXMucHJlZml4ICsgQUxMX0tFWVMpLnRoZW4oKGFsbEtleXMpID0+IHtcbiAgICAgIGFsbEtleXMgPSBhbGxLZXlzIHx8IHt9O1xuICAgICAgYWxsS2V5c1trZXldID0gdHJ1ZTtcbiAgICAgIHJldHVybiBQcm9taXNlLmFsbChbdGhpcy5jYWNoZS5wdXQodGhpcy5wcmVmaXggKyBBTExfS0VZUywgYWxsS2V5cywgdGhpcy50dGwpLCB0aGlzLmNhY2hlLnB1dChrZXksIHZhbHVlLCB0aGlzLnR0bCldKTtcbiAgICB9KTtcbiAgfVxuXG4gIGdldEFsbENsYXNzZXMoKSB7XG4gICAgaWYgKCF0aGlzLnR0bCkge1xuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShudWxsKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuY2FjaGUuZ2V0KHRoaXMucHJlZml4ICsgTUFJTl9TQ0hFTUEpO1xuICB9XG5cbiAgc2V0QWxsQ2xhc3NlcyhzY2hlbWEpIHtcbiAgICBpZiAoIXRoaXMudHRsKSB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG51bGwpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5wdXQodGhpcy5wcmVmaXggKyBNQUlOX1NDSEVNQSwgc2NoZW1hKTtcbiAgfVxuXG4gIHNldE9uZVNjaGVtYShjbGFzc05hbWUsIHNjaGVtYSkge1xuICAgIGlmICghdGhpcy50dGwpIHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUobnVsbCk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnB1dCh0aGlzLnByZWZpeCArIGNsYXNzTmFtZSwgc2NoZW1hKTtcbiAgfVxuXG4gIGdldE9uZVNjaGVtYShjbGFzc05hbWUpIHtcbiAgICBpZiAoIXRoaXMudHRsKSB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG51bGwpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5jYWNoZS5nZXQodGhpcy5wcmVmaXggKyBjbGFzc05hbWUpLnRoZW4oKHNjaGVtYSkgPT4ge1xuICAgICAgaWYgKHNjaGVtYSkge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHNjaGVtYSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy5jYWNoZS5nZXQodGhpcy5wcmVmaXggKyBNQUlOX1NDSEVNQSkudGhlbigoY2FjaGVkU2NoZW1hcykgPT4ge1xuICAgICAgICBjYWNoZWRTY2hlbWFzID0gY2FjaGVkU2NoZW1hcyB8fCBbXTtcbiAgICAgICAgc2NoZW1hID0gY2FjaGVkU2NoZW1hcy5maW5kKChjYWNoZWRTY2hlbWEpID0+IHtcbiAgICAgICAgICByZXR1cm4gY2FjaGVkU2NoZW1hLmNsYXNzTmFtZSA9PT0gY2xhc3NOYW1lO1xuICAgICAgICB9KTtcbiAgICAgICAgaWYgKHNjaGVtYSkge1xuICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoc2NoZW1hKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG51bGwpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICBjbGVhcigpIHtcbiAgICAvLyBUaGF0IGNsZWFycyBhbGwgY2FjaGVzLi4uXG4gICAgcmV0dXJuIHRoaXMuY2FjaGUuZ2V0KHRoaXMucHJlZml4ICsgQUxMX0tFWVMpLnRoZW4oKGFsbEtleXMpID0+IHtcbiAgICAgIGlmICghYWxsS2V5cykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBjb25zdCBwcm9taXNlcyA9IE9iamVjdC5rZXlzKGFsbEtleXMpLm1hcCgoa2V5KSA9PiB7XG4gICAgICAgIHJldHVybiB0aGlzLmNhY2hlLmRlbChrZXkpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gUHJvbWlzZS5hbGwocHJvbWlzZXMpO1xuICAgIH0pO1xuICB9XG59XG4iXX0=