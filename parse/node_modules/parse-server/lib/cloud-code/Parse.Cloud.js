'use strict';

var _node = require('parse/node');

var _triggers = require('../triggers');

var triggers = _interopRequireWildcard(_triggers);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function getClassName(parseClass) {
  if (parseClass && parseClass.className) {
    return parseClass.className;
  }
  return parseClass;
}

var ParseCloud = {};
ParseCloud.define = function (functionName, handler, validationHandler) {
  triggers.addFunction(functionName, handler, validationHandler, _node.Parse.applicationId);
};

ParseCloud.job = function (functionName, handler) {
  triggers.addJob(functionName, handler, _node.Parse.applicationId);
};

ParseCloud.beforeSave = function (parseClass, handler) {
  var className = getClassName(parseClass);
  triggers.addTrigger(triggers.Types.beforeSave, className, handler, _node.Parse.applicationId);
};

ParseCloud.beforeDelete = function (parseClass, handler) {
  var className = getClassName(parseClass);
  triggers.addTrigger(triggers.Types.beforeDelete, className, handler, _node.Parse.applicationId);
};

ParseCloud.afterSave = function (parseClass, handler) {
  var className = getClassName(parseClass);
  triggers.addTrigger(triggers.Types.afterSave, className, handler, _node.Parse.applicationId);
};

ParseCloud.afterDelete = function (parseClass, handler) {
  var className = getClassName(parseClass);
  triggers.addTrigger(triggers.Types.afterDelete, className, handler, _node.Parse.applicationId);
};

ParseCloud.beforeFind = function (parseClass, handler) {
  var className = getClassName(parseClass);
  triggers.addTrigger(triggers.Types.beforeFind, className, handler, _node.Parse.applicationId);
};

ParseCloud.afterFind = function (parseClass, handler) {
  const className = getClassName(parseClass);
  triggers.addTrigger(triggers.Types.afterFind, className, handler, _node.Parse.applicationId);
};

ParseCloud.onLiveQueryEvent = function (handler) {
  triggers.addLiveQueryEventHandler(handler, _node.Parse.applicationId);
};

ParseCloud._removeAllHooks = () => {
  triggers._unregisterAll();
};

ParseCloud.useMasterKey = () => {
  // eslint-disable-next-line
  console.warn("Parse.Cloud.useMasterKey is deprecated (and has no effect anymore) on parse-server, please refer to the cloud code migration notes: http://docs.parseplatform.org/parse-server/guide/#master-key-must-be-passed-explicitly");
};

ParseCloud.httpRequest = require("./httpRequest");

module.exports = ParseCloud;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jbG91ZC1jb2RlL1BhcnNlLkNsb3VkLmpzIl0sIm5hbWVzIjpbInRyaWdnZXJzIiwiZ2V0Q2xhc3NOYW1lIiwicGFyc2VDbGFzcyIsImNsYXNzTmFtZSIsIlBhcnNlQ2xvdWQiLCJkZWZpbmUiLCJmdW5jdGlvbk5hbWUiLCJoYW5kbGVyIiwidmFsaWRhdGlvbkhhbmRsZXIiLCJhZGRGdW5jdGlvbiIsIlBhcnNlIiwiYXBwbGljYXRpb25JZCIsImpvYiIsImFkZEpvYiIsImJlZm9yZVNhdmUiLCJhZGRUcmlnZ2VyIiwiVHlwZXMiLCJiZWZvcmVEZWxldGUiLCJhZnRlclNhdmUiLCJhZnRlckRlbGV0ZSIsImJlZm9yZUZpbmQiLCJhZnRlckZpbmQiLCJvbkxpdmVRdWVyeUV2ZW50IiwiYWRkTGl2ZVF1ZXJ5RXZlbnRIYW5kbGVyIiwiX3JlbW92ZUFsbEhvb2tzIiwiX3VucmVnaXN0ZXJBbGwiLCJ1c2VNYXN0ZXJLZXkiLCJjb25zb2xlIiwid2FybiIsImh0dHBSZXF1ZXN0IiwicmVxdWlyZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiI7O0FBQUE7O0FBQ0E7O0lBQVlBLFE7Ozs7QUFFWixTQUFTQyxZQUFULENBQXNCQyxVQUF0QixFQUFrQztBQUNoQyxNQUFJQSxjQUFjQSxXQUFXQyxTQUE3QixFQUF3QztBQUN0QyxXQUFPRCxXQUFXQyxTQUFsQjtBQUNEO0FBQ0QsU0FBT0QsVUFBUDtBQUNEOztBQUVELElBQUlFLGFBQWEsRUFBakI7QUFDQUEsV0FBV0MsTUFBWCxHQUFvQixVQUFTQyxZQUFULEVBQXVCQyxPQUF2QixFQUFnQ0MsaUJBQWhDLEVBQW1EO0FBQ3JFUixXQUFTUyxXQUFULENBQXFCSCxZQUFyQixFQUFtQ0MsT0FBbkMsRUFBNENDLGlCQUE1QyxFQUErREUsWUFBTUMsYUFBckU7QUFDRCxDQUZEOztBQUlBUCxXQUFXUSxHQUFYLEdBQWlCLFVBQVNOLFlBQVQsRUFBdUJDLE9BQXZCLEVBQWdDO0FBQy9DUCxXQUFTYSxNQUFULENBQWdCUCxZQUFoQixFQUE4QkMsT0FBOUIsRUFBdUNHLFlBQU1DLGFBQTdDO0FBQ0QsQ0FGRDs7QUFJQVAsV0FBV1UsVUFBWCxHQUF3QixVQUFTWixVQUFULEVBQXFCSyxPQUFyQixFQUE4QjtBQUNwRCxNQUFJSixZQUFZRixhQUFhQyxVQUFiLENBQWhCO0FBQ0FGLFdBQVNlLFVBQVQsQ0FBb0JmLFNBQVNnQixLQUFULENBQWVGLFVBQW5DLEVBQStDWCxTQUEvQyxFQUEwREksT0FBMUQsRUFBbUVHLFlBQU1DLGFBQXpFO0FBQ0QsQ0FIRDs7QUFLQVAsV0FBV2EsWUFBWCxHQUEwQixVQUFTZixVQUFULEVBQXFCSyxPQUFyQixFQUE4QjtBQUN0RCxNQUFJSixZQUFZRixhQUFhQyxVQUFiLENBQWhCO0FBQ0FGLFdBQVNlLFVBQVQsQ0FBb0JmLFNBQVNnQixLQUFULENBQWVDLFlBQW5DLEVBQWlEZCxTQUFqRCxFQUE0REksT0FBNUQsRUFBcUVHLFlBQU1DLGFBQTNFO0FBQ0QsQ0FIRDs7QUFLQVAsV0FBV2MsU0FBWCxHQUF1QixVQUFTaEIsVUFBVCxFQUFxQkssT0FBckIsRUFBOEI7QUFDbkQsTUFBSUosWUFBWUYsYUFBYUMsVUFBYixDQUFoQjtBQUNBRixXQUFTZSxVQUFULENBQW9CZixTQUFTZ0IsS0FBVCxDQUFlRSxTQUFuQyxFQUE4Q2YsU0FBOUMsRUFBeURJLE9BQXpELEVBQWtFRyxZQUFNQyxhQUF4RTtBQUNELENBSEQ7O0FBS0FQLFdBQVdlLFdBQVgsR0FBeUIsVUFBU2pCLFVBQVQsRUFBcUJLLE9BQXJCLEVBQThCO0FBQ3JELE1BQUlKLFlBQVlGLGFBQWFDLFVBQWIsQ0FBaEI7QUFDQUYsV0FBU2UsVUFBVCxDQUFvQmYsU0FBU2dCLEtBQVQsQ0FBZUcsV0FBbkMsRUFBZ0RoQixTQUFoRCxFQUEyREksT0FBM0QsRUFBb0VHLFlBQU1DLGFBQTFFO0FBQ0QsQ0FIRDs7QUFLQVAsV0FBV2dCLFVBQVgsR0FBd0IsVUFBU2xCLFVBQVQsRUFBcUJLLE9BQXJCLEVBQThCO0FBQ3BELE1BQUlKLFlBQVlGLGFBQWFDLFVBQWIsQ0FBaEI7QUFDQUYsV0FBU2UsVUFBVCxDQUFvQmYsU0FBU2dCLEtBQVQsQ0FBZUksVUFBbkMsRUFBK0NqQixTQUEvQyxFQUEwREksT0FBMUQsRUFBbUVHLFlBQU1DLGFBQXpFO0FBQ0QsQ0FIRDs7QUFLQVAsV0FBV2lCLFNBQVgsR0FBdUIsVUFBU25CLFVBQVQsRUFBcUJLLE9BQXJCLEVBQThCO0FBQ25ELFFBQU1KLFlBQVlGLGFBQWFDLFVBQWIsQ0FBbEI7QUFDQUYsV0FBU2UsVUFBVCxDQUFvQmYsU0FBU2dCLEtBQVQsQ0FBZUssU0FBbkMsRUFBOENsQixTQUE5QyxFQUF5REksT0FBekQsRUFBa0VHLFlBQU1DLGFBQXhFO0FBQ0QsQ0FIRDs7QUFLQVAsV0FBV2tCLGdCQUFYLEdBQThCLFVBQVNmLE9BQVQsRUFBa0I7QUFDOUNQLFdBQVN1Qix3QkFBVCxDQUFrQ2hCLE9BQWxDLEVBQTJDRyxZQUFNQyxhQUFqRDtBQUNELENBRkQ7O0FBSUFQLFdBQVdvQixlQUFYLEdBQTZCLE1BQU07QUFDakN4QixXQUFTeUIsY0FBVDtBQUNELENBRkQ7O0FBSUFyQixXQUFXc0IsWUFBWCxHQUEwQixNQUFNO0FBQzlCO0FBQ0FDLFVBQVFDLElBQVIsQ0FBYSw0TkFBYjtBQUNELENBSEQ7O0FBS0F4QixXQUFXeUIsV0FBWCxHQUF5QkMsUUFBUSxlQUFSLENBQXpCOztBQUVBQyxPQUFPQyxPQUFQLEdBQWlCNUIsVUFBakIiLCJmaWxlIjoiUGFyc2UuQ2xvdWQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQYXJzZSB9ICAgICBmcm9tICdwYXJzZS9ub2RlJztcbmltcG9ydCAqIGFzIHRyaWdnZXJzIGZyb20gJy4uL3RyaWdnZXJzJztcblxuZnVuY3Rpb24gZ2V0Q2xhc3NOYW1lKHBhcnNlQ2xhc3MpIHtcbiAgaWYgKHBhcnNlQ2xhc3MgJiYgcGFyc2VDbGFzcy5jbGFzc05hbWUpIHtcbiAgICByZXR1cm4gcGFyc2VDbGFzcy5jbGFzc05hbWU7XG4gIH1cbiAgcmV0dXJuIHBhcnNlQ2xhc3M7XG59XG5cbnZhciBQYXJzZUNsb3VkID0ge307XG5QYXJzZUNsb3VkLmRlZmluZSA9IGZ1bmN0aW9uKGZ1bmN0aW9uTmFtZSwgaGFuZGxlciwgdmFsaWRhdGlvbkhhbmRsZXIpIHtcbiAgdHJpZ2dlcnMuYWRkRnVuY3Rpb24oZnVuY3Rpb25OYW1lLCBoYW5kbGVyLCB2YWxpZGF0aW9uSGFuZGxlciwgUGFyc2UuYXBwbGljYXRpb25JZCk7XG59O1xuXG5QYXJzZUNsb3VkLmpvYiA9IGZ1bmN0aW9uKGZ1bmN0aW9uTmFtZSwgaGFuZGxlcikge1xuICB0cmlnZ2Vycy5hZGRKb2IoZnVuY3Rpb25OYW1lLCBoYW5kbGVyLCBQYXJzZS5hcHBsaWNhdGlvbklkKTtcbn07XG5cblBhcnNlQ2xvdWQuYmVmb3JlU2F2ZSA9IGZ1bmN0aW9uKHBhcnNlQ2xhc3MsIGhhbmRsZXIpIHtcbiAgdmFyIGNsYXNzTmFtZSA9IGdldENsYXNzTmFtZShwYXJzZUNsYXNzKTtcbiAgdHJpZ2dlcnMuYWRkVHJpZ2dlcih0cmlnZ2Vycy5UeXBlcy5iZWZvcmVTYXZlLCBjbGFzc05hbWUsIGhhbmRsZXIsIFBhcnNlLmFwcGxpY2F0aW9uSWQpO1xufTtcblxuUGFyc2VDbG91ZC5iZWZvcmVEZWxldGUgPSBmdW5jdGlvbihwYXJzZUNsYXNzLCBoYW5kbGVyKSB7XG4gIHZhciBjbGFzc05hbWUgPSBnZXRDbGFzc05hbWUocGFyc2VDbGFzcyk7XG4gIHRyaWdnZXJzLmFkZFRyaWdnZXIodHJpZ2dlcnMuVHlwZXMuYmVmb3JlRGVsZXRlLCBjbGFzc05hbWUsIGhhbmRsZXIsIFBhcnNlLmFwcGxpY2F0aW9uSWQpO1xufTtcblxuUGFyc2VDbG91ZC5hZnRlclNhdmUgPSBmdW5jdGlvbihwYXJzZUNsYXNzLCBoYW5kbGVyKSB7XG4gIHZhciBjbGFzc05hbWUgPSBnZXRDbGFzc05hbWUocGFyc2VDbGFzcyk7XG4gIHRyaWdnZXJzLmFkZFRyaWdnZXIodHJpZ2dlcnMuVHlwZXMuYWZ0ZXJTYXZlLCBjbGFzc05hbWUsIGhhbmRsZXIsIFBhcnNlLmFwcGxpY2F0aW9uSWQpO1xufTtcblxuUGFyc2VDbG91ZC5hZnRlckRlbGV0ZSA9IGZ1bmN0aW9uKHBhcnNlQ2xhc3MsIGhhbmRsZXIpIHtcbiAgdmFyIGNsYXNzTmFtZSA9IGdldENsYXNzTmFtZShwYXJzZUNsYXNzKTtcbiAgdHJpZ2dlcnMuYWRkVHJpZ2dlcih0cmlnZ2Vycy5UeXBlcy5hZnRlckRlbGV0ZSwgY2xhc3NOYW1lLCBoYW5kbGVyLCBQYXJzZS5hcHBsaWNhdGlvbklkKTtcbn07XG5cblBhcnNlQ2xvdWQuYmVmb3JlRmluZCA9IGZ1bmN0aW9uKHBhcnNlQ2xhc3MsIGhhbmRsZXIpIHtcbiAgdmFyIGNsYXNzTmFtZSA9IGdldENsYXNzTmFtZShwYXJzZUNsYXNzKTtcbiAgdHJpZ2dlcnMuYWRkVHJpZ2dlcih0cmlnZ2Vycy5UeXBlcy5iZWZvcmVGaW5kLCBjbGFzc05hbWUsIGhhbmRsZXIsIFBhcnNlLmFwcGxpY2F0aW9uSWQpO1xufTtcblxuUGFyc2VDbG91ZC5hZnRlckZpbmQgPSBmdW5jdGlvbihwYXJzZUNsYXNzLCBoYW5kbGVyKSB7XG4gIGNvbnN0IGNsYXNzTmFtZSA9IGdldENsYXNzTmFtZShwYXJzZUNsYXNzKTtcbiAgdHJpZ2dlcnMuYWRkVHJpZ2dlcih0cmlnZ2Vycy5UeXBlcy5hZnRlckZpbmQsIGNsYXNzTmFtZSwgaGFuZGxlciwgUGFyc2UuYXBwbGljYXRpb25JZCk7XG59O1xuXG5QYXJzZUNsb3VkLm9uTGl2ZVF1ZXJ5RXZlbnQgPSBmdW5jdGlvbihoYW5kbGVyKSB7XG4gIHRyaWdnZXJzLmFkZExpdmVRdWVyeUV2ZW50SGFuZGxlcihoYW5kbGVyLCBQYXJzZS5hcHBsaWNhdGlvbklkKTtcbn07XG5cblBhcnNlQ2xvdWQuX3JlbW92ZUFsbEhvb2tzID0gKCkgPT4ge1xuICB0cmlnZ2Vycy5fdW5yZWdpc3RlckFsbCgpO1xufVxuXG5QYXJzZUNsb3VkLnVzZU1hc3RlcktleSA9ICgpID0+IHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gIGNvbnNvbGUud2FybihcIlBhcnNlLkNsb3VkLnVzZU1hc3RlcktleSBpcyBkZXByZWNhdGVkIChhbmQgaGFzIG5vIGVmZmVjdCBhbnltb3JlKSBvbiBwYXJzZS1zZXJ2ZXIsIHBsZWFzZSByZWZlciB0byB0aGUgY2xvdWQgY29kZSBtaWdyYXRpb24gbm90ZXM6IGh0dHA6Ly9kb2NzLnBhcnNlcGxhdGZvcm0ub3JnL3BhcnNlLXNlcnZlci9ndWlkZS8jbWFzdGVyLWtleS1tdXN0LWJlLXBhc3NlZC1leHBsaWNpdGx5XCIpXG59XG5cblBhcnNlQ2xvdWQuaHR0cFJlcXVlc3QgPSByZXF1aXJlKFwiLi9odHRwUmVxdWVzdFwiKTtcblxubW9kdWxlLmV4cG9ydHMgPSBQYXJzZUNsb3VkO1xuIl19