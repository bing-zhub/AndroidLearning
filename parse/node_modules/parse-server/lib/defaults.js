'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DefaultMongoURI = undefined;

var _parsers = require('./Options/parsers');

const { ParseServerOptions } = require('./Options/Definitions');
const logsFolder = (() => {
  let folder = './logs/';
  if (typeof process !== 'undefined' && process.env.TESTING === '1') {
    folder = './test_logs/';
  }
  if (process.env.PARSE_SERVER_LOGS_FOLDER) {
    folder = (0, _parsers.nullParser)(process.env.PARSE_SERVER_LOGS_FOLDER);
  }
  return folder;
})();

const { verbose, level } = (() => {
  const verbose = process.env.VERBOSE ? true : false;
  return { verbose, level: verbose ? 'verbose' : undefined };
})();

const DefinitionDefaults = Object.keys(ParseServerOptions).reduce((memo, key) => {
  const def = ParseServerOptions[key];
  if (def.hasOwnProperty('default')) {
    memo[key] = def.default;
  }
  return memo;
}, {});

const computedDefaults = {
  jsonLogs: process.env.JSON_LOGS || false,
  logsFolder,
  verbose,
  level
};

exports.default = Object.assign({}, DefinitionDefaults, computedDefaults);
const DefaultMongoURI = exports.DefaultMongoURI = DefinitionDefaults.databaseURI;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9kZWZhdWx0cy5qcyJdLCJuYW1lcyI6WyJQYXJzZVNlcnZlck9wdGlvbnMiLCJyZXF1aXJlIiwibG9nc0ZvbGRlciIsImZvbGRlciIsInByb2Nlc3MiLCJlbnYiLCJURVNUSU5HIiwiUEFSU0VfU0VSVkVSX0xPR1NfRk9MREVSIiwidmVyYm9zZSIsImxldmVsIiwiVkVSQk9TRSIsInVuZGVmaW5lZCIsIkRlZmluaXRpb25EZWZhdWx0cyIsIk9iamVjdCIsImtleXMiLCJyZWR1Y2UiLCJtZW1vIiwia2V5IiwiZGVmIiwiaGFzT3duUHJvcGVydHkiLCJkZWZhdWx0IiwiY29tcHV0ZWREZWZhdWx0cyIsImpzb25Mb2dzIiwiSlNPTl9MT0dTIiwiYXNzaWduIiwiRGVmYXVsdE1vbmdvVVJJIiwiZGF0YWJhc2VVUkkiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7QUFDQSxNQUFNLEVBQUVBLGtCQUFGLEtBQXlCQyxRQUFRLHVCQUFSLENBQS9CO0FBQ0EsTUFBTUMsYUFBYSxDQUFDLE1BQU07QUFDeEIsTUFBSUMsU0FBUyxTQUFiO0FBQ0EsTUFBSSxPQUFPQyxPQUFQLEtBQW1CLFdBQW5CLElBQWtDQSxRQUFRQyxHQUFSLENBQVlDLE9BQVosS0FBd0IsR0FBOUQsRUFBbUU7QUFDakVILGFBQVMsY0FBVDtBQUNEO0FBQ0QsTUFBSUMsUUFBUUMsR0FBUixDQUFZRSx3QkFBaEIsRUFBMEM7QUFDeENKLGFBQVMseUJBQVdDLFFBQVFDLEdBQVIsQ0FBWUUsd0JBQXZCLENBQVQ7QUFDRDtBQUNELFNBQU9KLE1BQVA7QUFDRCxDQVRrQixHQUFuQjs7QUFXQSxNQUFNLEVBQUVLLE9BQUYsRUFBV0MsS0FBWCxLQUFxQixDQUFDLE1BQU07QUFDaEMsUUFBTUQsVUFBVUosUUFBUUMsR0FBUixDQUFZSyxPQUFaLEdBQXNCLElBQXRCLEdBQTZCLEtBQTdDO0FBQ0EsU0FBTyxFQUFFRixPQUFGLEVBQVdDLE9BQU9ELFVBQVUsU0FBVixHQUFzQkcsU0FBeEMsRUFBUDtBQUNELENBSDBCLEdBQTNCOztBQU1BLE1BQU1DLHFCQUFxQkMsT0FBT0MsSUFBUCxDQUFZZCxrQkFBWixFQUFnQ2UsTUFBaEMsQ0FBdUMsQ0FBQ0MsSUFBRCxFQUFPQyxHQUFQLEtBQWU7QUFDL0UsUUFBTUMsTUFBTWxCLG1CQUFtQmlCLEdBQW5CLENBQVo7QUFDQSxNQUFJQyxJQUFJQyxjQUFKLENBQW1CLFNBQW5CLENBQUosRUFBbUM7QUFDakNILFNBQUtDLEdBQUwsSUFBWUMsSUFBSUUsT0FBaEI7QUFDRDtBQUNELFNBQU9KLElBQVA7QUFDRCxDQU4wQixFQU14QixFQU53QixDQUEzQjs7QUFRQSxNQUFNSyxtQkFBbUI7QUFDdkJDLFlBQVVsQixRQUFRQyxHQUFSLENBQVlrQixTQUFaLElBQXlCLEtBRFo7QUFFdkJyQixZQUZ1QjtBQUd2Qk0sU0FIdUI7QUFJdkJDO0FBSnVCLENBQXpCOztrQkFPZUksT0FBT1csTUFBUCxDQUFjLEVBQWQsRUFBa0JaLGtCQUFsQixFQUFzQ1MsZ0JBQXRDLEM7QUFDUixNQUFNSSw0Q0FBa0JiLG1CQUFtQmMsV0FBM0MiLCJmaWxlIjoiZGVmYXVsdHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBudWxsUGFyc2VyIH0gZnJvbSAnLi9PcHRpb25zL3BhcnNlcnMnO1xuY29uc3QgeyBQYXJzZVNlcnZlck9wdGlvbnMgfSA9IHJlcXVpcmUoJy4vT3B0aW9ucy9EZWZpbml0aW9ucycpO1xuY29uc3QgbG9nc0ZvbGRlciA9ICgoKSA9PiB7XG4gIGxldCBmb2xkZXIgPSAnLi9sb2dzLyc7XG4gIGlmICh0eXBlb2YgcHJvY2VzcyAhPT0gJ3VuZGVmaW5lZCcgJiYgcHJvY2Vzcy5lbnYuVEVTVElORyA9PT0gJzEnKSB7XG4gICAgZm9sZGVyID0gJy4vdGVzdF9sb2dzLydcbiAgfVxuICBpZiAocHJvY2Vzcy5lbnYuUEFSU0VfU0VSVkVSX0xPR1NfRk9MREVSKSB7XG4gICAgZm9sZGVyID0gbnVsbFBhcnNlcihwcm9jZXNzLmVudi5QQVJTRV9TRVJWRVJfTE9HU19GT0xERVIpO1xuICB9XG4gIHJldHVybiBmb2xkZXI7XG59KSgpO1xuXG5jb25zdCB7IHZlcmJvc2UsIGxldmVsIH0gPSAoKCkgPT4ge1xuICBjb25zdCB2ZXJib3NlID0gcHJvY2Vzcy5lbnYuVkVSQk9TRSA/IHRydWUgOiBmYWxzZTtcbiAgcmV0dXJuIHsgdmVyYm9zZSwgbGV2ZWw6IHZlcmJvc2UgPyAndmVyYm9zZScgOiB1bmRlZmluZWQgfVxufSkoKTtcblxuXG5jb25zdCBEZWZpbml0aW9uRGVmYXVsdHMgPSBPYmplY3Qua2V5cyhQYXJzZVNlcnZlck9wdGlvbnMpLnJlZHVjZSgobWVtbywga2V5KSA9PiB7XG4gIGNvbnN0IGRlZiA9IFBhcnNlU2VydmVyT3B0aW9uc1trZXldO1xuICBpZiAoZGVmLmhhc093blByb3BlcnR5KCdkZWZhdWx0JykpIHtcbiAgICBtZW1vW2tleV0gPSBkZWYuZGVmYXVsdDtcbiAgfVxuICByZXR1cm4gbWVtbztcbn0sIHt9KTtcblxuY29uc3QgY29tcHV0ZWREZWZhdWx0cyA9IHtcbiAganNvbkxvZ3M6IHByb2Nlc3MuZW52LkpTT05fTE9HUyB8fCBmYWxzZSxcbiAgbG9nc0ZvbGRlcixcbiAgdmVyYm9zZSxcbiAgbGV2ZWwsXG59XG5cbmV4cG9ydCBkZWZhdWx0IE9iamVjdC5hc3NpZ24oe30sIERlZmluaXRpb25EZWZhdWx0cywgY29tcHV0ZWREZWZhdWx0cyk7XG5leHBvcnQgY29uc3QgRGVmYXVsdE1vbmdvVVJJID0gRGVmaW5pdGlvbkRlZmF1bHRzLmRhdGFiYXNlVVJJO1xuIl19