'use strict';

// Helper functions for accessing the google API.
var https = require('https');
var Parse = require('parse/node').Parse;

function validateIdToken(id, token) {
  return request("tokeninfo?id_token=" + token).then(response => {
    if (response && (response.sub == id || response.user_id == id)) {
      return;
    }
    throw new Parse.Error(Parse.Error.OBJECT_NOT_FOUND, 'Google auth is invalid for this user.');
  });
}

function validateAuthToken(id, token) {
  return request("tokeninfo?access_token=" + token).then(response => {
    if (response && (response.sub == id || response.user_id == id)) {
      return;
    }
    throw new Parse.Error(Parse.Error.OBJECT_NOT_FOUND, 'Google auth is invalid for this user.');
  });
}

// Returns a promise that fulfills if this user id is valid.
function validateAuthData(authData) {
  if (authData.id_token) {
    return validateIdToken(authData.id, authData.id_token);
  } else {
    return validateAuthToken(authData.id, authData.access_token).then(() => {
      // Validation with auth token worked
      return;
    }, () => {
      // Try with the id_token param
      return validateIdToken(authData.id, authData.access_token);
    });
  }
}

// Returns a promise that fulfills if this app id is valid.
function validateAppId() {
  return Promise.resolve();
}

// A promisey wrapper for api requests
function request(path) {
  return new Promise(function (resolve, reject) {
    https.get("https://www.googleapis.com/oauth2/v3/" + path, function (res) {
      var data = '';
      res.on('data', function (chunk) {
        data += chunk;
      });
      res.on('end', function () {
        try {
          data = JSON.parse(data);
        } catch (e) {
          return reject(e);
        }
        resolve(data);
      });
    }).on('error', function () {
      reject('Failed to validate this access token with Google.');
    });
  });
}

module.exports = {
  validateAppId: validateAppId,
  validateAuthData: validateAuthData
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9BZGFwdGVycy9BdXRoL2dvb2dsZS5qcyJdLCJuYW1lcyI6WyJodHRwcyIsInJlcXVpcmUiLCJQYXJzZSIsInZhbGlkYXRlSWRUb2tlbiIsImlkIiwidG9rZW4iLCJyZXF1ZXN0IiwidGhlbiIsInJlc3BvbnNlIiwic3ViIiwidXNlcl9pZCIsIkVycm9yIiwiT0JKRUNUX05PVF9GT1VORCIsInZhbGlkYXRlQXV0aFRva2VuIiwidmFsaWRhdGVBdXRoRGF0YSIsImF1dGhEYXRhIiwiaWRfdG9rZW4iLCJhY2Nlc3NfdG9rZW4iLCJ2YWxpZGF0ZUFwcElkIiwiUHJvbWlzZSIsInJlc29sdmUiLCJwYXRoIiwicmVqZWN0IiwiZ2V0IiwicmVzIiwiZGF0YSIsIm9uIiwiY2h1bmsiLCJKU09OIiwicGFyc2UiLCJlIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6Ijs7QUFBQTtBQUNBLElBQUlBLFFBQVFDLFFBQVEsT0FBUixDQUFaO0FBQ0EsSUFBSUMsUUFBUUQsUUFBUSxZQUFSLEVBQXNCQyxLQUFsQzs7QUFFQSxTQUFTQyxlQUFULENBQXlCQyxFQUF6QixFQUE2QkMsS0FBN0IsRUFBb0M7QUFDbEMsU0FBT0MsUUFBUSx3QkFBd0JELEtBQWhDLEVBQ0pFLElBREksQ0FDRUMsUUFBRCxJQUFjO0FBQ2xCLFFBQUlBLGFBQWFBLFNBQVNDLEdBQVQsSUFBZ0JMLEVBQWhCLElBQXNCSSxTQUFTRSxPQUFULElBQW9CTixFQUF2RCxDQUFKLEVBQWdFO0FBQzlEO0FBQ0Q7QUFDRCxVQUFNLElBQUlGLE1BQU1TLEtBQVYsQ0FDSlQsTUFBTVMsS0FBTixDQUFZQyxnQkFEUixFQUVKLHVDQUZJLENBQU47QUFHRCxHQVJJLENBQVA7QUFTRDs7QUFFRCxTQUFTQyxpQkFBVCxDQUEyQlQsRUFBM0IsRUFBK0JDLEtBQS9CLEVBQXNDO0FBQ3BDLFNBQU9DLFFBQVEsNEJBQTRCRCxLQUFwQyxFQUNKRSxJQURJLENBQ0VDLFFBQUQsSUFBYztBQUNsQixRQUFJQSxhQUFjQSxTQUFTQyxHQUFULElBQWdCTCxFQUFoQixJQUFzQkksU0FBU0UsT0FBVCxJQUFvQk4sRUFBeEQsQ0FBSixFQUFpRTtBQUMvRDtBQUNEO0FBQ0QsVUFBTSxJQUFJRixNQUFNUyxLQUFWLENBQ0pULE1BQU1TLEtBQU4sQ0FBWUMsZ0JBRFIsRUFFSix1Q0FGSSxDQUFOO0FBR0QsR0FSSSxDQUFQO0FBU0Q7O0FBRUQ7QUFDQSxTQUFTRSxnQkFBVCxDQUEwQkMsUUFBMUIsRUFBb0M7QUFDbEMsTUFBSUEsU0FBU0MsUUFBYixFQUF1QjtBQUNyQixXQUFPYixnQkFBZ0JZLFNBQVNYLEVBQXpCLEVBQTZCVyxTQUFTQyxRQUF0QyxDQUFQO0FBQ0QsR0FGRCxNQUVPO0FBQ0wsV0FBT0gsa0JBQWtCRSxTQUFTWCxFQUEzQixFQUErQlcsU0FBU0UsWUFBeEMsRUFBc0RWLElBQXRELENBQTJELE1BQU07QUFDdEU7QUFDQTtBQUNELEtBSE0sRUFHSixNQUFNO0FBQ1A7QUFDQSxhQUFPSixnQkFBZ0JZLFNBQVNYLEVBQXpCLEVBQTZCVyxTQUFTRSxZQUF0QyxDQUFQO0FBQ0QsS0FOTSxDQUFQO0FBT0Q7QUFDRjs7QUFFRDtBQUNBLFNBQVNDLGFBQVQsR0FBeUI7QUFDdkIsU0FBT0MsUUFBUUMsT0FBUixFQUFQO0FBQ0Q7O0FBRUQ7QUFDQSxTQUFTZCxPQUFULENBQWlCZSxJQUFqQixFQUF1QjtBQUNyQixTQUFPLElBQUlGLE9BQUosQ0FBWSxVQUFTQyxPQUFULEVBQWtCRSxNQUFsQixFQUEwQjtBQUMzQ3RCLFVBQU11QixHQUFOLENBQVUsMENBQTBDRixJQUFwRCxFQUEwRCxVQUFTRyxHQUFULEVBQWM7QUFDdEUsVUFBSUMsT0FBTyxFQUFYO0FBQ0FELFVBQUlFLEVBQUosQ0FBTyxNQUFQLEVBQWUsVUFBU0MsS0FBVCxFQUFnQjtBQUM3QkYsZ0JBQVFFLEtBQVI7QUFDRCxPQUZEO0FBR0FILFVBQUlFLEVBQUosQ0FBTyxLQUFQLEVBQWMsWUFBVztBQUN2QixZQUFJO0FBQ0ZELGlCQUFPRyxLQUFLQyxLQUFMLENBQVdKLElBQVgsQ0FBUDtBQUNELFNBRkQsQ0FFRSxPQUFNSyxDQUFOLEVBQVM7QUFDVCxpQkFBT1IsT0FBT1EsQ0FBUCxDQUFQO0FBQ0Q7QUFDRFYsZ0JBQVFLLElBQVI7QUFDRCxPQVBEO0FBUUQsS0FiRCxFQWFHQyxFQWJILENBYU0sT0FiTixFQWFlLFlBQVc7QUFDeEJKLGFBQU8sbURBQVA7QUFDRCxLQWZEO0FBZ0JELEdBakJNLENBQVA7QUFrQkQ7O0FBRURTLE9BQU9DLE9BQVAsR0FBaUI7QUFDZmQsaUJBQWVBLGFBREE7QUFFZkosb0JBQWtCQTtBQUZILENBQWpCIiwiZmlsZSI6Imdvb2dsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIEhlbHBlciBmdW5jdGlvbnMgZm9yIGFjY2Vzc2luZyB0aGUgZ29vZ2xlIEFQSS5cbnZhciBodHRwcyA9IHJlcXVpcmUoJ2h0dHBzJyk7XG52YXIgUGFyc2UgPSByZXF1aXJlKCdwYXJzZS9ub2RlJykuUGFyc2U7XG5cbmZ1bmN0aW9uIHZhbGlkYXRlSWRUb2tlbihpZCwgdG9rZW4pIHtcbiAgcmV0dXJuIHJlcXVlc3QoXCJ0b2tlbmluZm8/aWRfdG9rZW49XCIgKyB0b2tlbilcbiAgICAudGhlbigocmVzcG9uc2UpID0+IHtcbiAgICAgIGlmIChyZXNwb25zZSAmJiAocmVzcG9uc2Uuc3ViID09IGlkIHx8IHJlc3BvbnNlLnVzZXJfaWQgPT0gaWQpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHRocm93IG5ldyBQYXJzZS5FcnJvcihcbiAgICAgICAgUGFyc2UuRXJyb3IuT0JKRUNUX05PVF9GT1VORCxcbiAgICAgICAgJ0dvb2dsZSBhdXRoIGlzIGludmFsaWQgZm9yIHRoaXMgdXNlci4nKTtcbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gdmFsaWRhdGVBdXRoVG9rZW4oaWQsIHRva2VuKSB7XG4gIHJldHVybiByZXF1ZXN0KFwidG9rZW5pbmZvP2FjY2Vzc190b2tlbj1cIiArIHRva2VuKVxuICAgIC50aGVuKChyZXNwb25zZSkgPT4ge1xuICAgICAgaWYgKHJlc3BvbnNlICYmICAocmVzcG9uc2Uuc3ViID09IGlkIHx8IHJlc3BvbnNlLnVzZXJfaWQgPT0gaWQpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHRocm93IG5ldyBQYXJzZS5FcnJvcihcbiAgICAgICAgUGFyc2UuRXJyb3IuT0JKRUNUX05PVF9GT1VORCxcbiAgICAgICAgJ0dvb2dsZSBhdXRoIGlzIGludmFsaWQgZm9yIHRoaXMgdXNlci4nKTtcbiAgICB9KTtcbn1cblxuLy8gUmV0dXJucyBhIHByb21pc2UgdGhhdCBmdWxmaWxscyBpZiB0aGlzIHVzZXIgaWQgaXMgdmFsaWQuXG5mdW5jdGlvbiB2YWxpZGF0ZUF1dGhEYXRhKGF1dGhEYXRhKSB7XG4gIGlmIChhdXRoRGF0YS5pZF90b2tlbikge1xuICAgIHJldHVybiB2YWxpZGF0ZUlkVG9rZW4oYXV0aERhdGEuaWQsIGF1dGhEYXRhLmlkX3Rva2VuKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gdmFsaWRhdGVBdXRoVG9rZW4oYXV0aERhdGEuaWQsIGF1dGhEYXRhLmFjY2Vzc190b2tlbikudGhlbigoKSA9PiB7XG4gICAgICAvLyBWYWxpZGF0aW9uIHdpdGggYXV0aCB0b2tlbiB3b3JrZWRcbiAgICAgIHJldHVybjtcbiAgICB9LCAoKSA9PiB7XG4gICAgICAvLyBUcnkgd2l0aCB0aGUgaWRfdG9rZW4gcGFyYW1cbiAgICAgIHJldHVybiB2YWxpZGF0ZUlkVG9rZW4oYXV0aERhdGEuaWQsIGF1dGhEYXRhLmFjY2Vzc190b2tlbik7XG4gICAgfSk7XG4gIH1cbn1cblxuLy8gUmV0dXJucyBhIHByb21pc2UgdGhhdCBmdWxmaWxscyBpZiB0aGlzIGFwcCBpZCBpcyB2YWxpZC5cbmZ1bmN0aW9uIHZhbGlkYXRlQXBwSWQoKSB7XG4gIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbn1cblxuLy8gQSBwcm9taXNleSB3cmFwcGVyIGZvciBhcGkgcmVxdWVzdHNcbmZ1bmN0aW9uIHJlcXVlc3QocGF0aCkge1xuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgaHR0cHMuZ2V0KFwiaHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vb2F1dGgyL3YzL1wiICsgcGF0aCwgZnVuY3Rpb24ocmVzKSB7XG4gICAgICB2YXIgZGF0YSA9ICcnO1xuICAgICAgcmVzLm9uKCdkYXRhJywgZnVuY3Rpb24oY2h1bmspIHtcbiAgICAgICAgZGF0YSArPSBjaHVuaztcbiAgICAgIH0pO1xuICAgICAgcmVzLm9uKCdlbmQnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBkYXRhID0gSlNPTi5wYXJzZShkYXRhKTtcbiAgICAgICAgfSBjYXRjaChlKSB7XG4gICAgICAgICAgcmV0dXJuIHJlamVjdChlKTtcbiAgICAgICAgfVxuICAgICAgICByZXNvbHZlKGRhdGEpO1xuICAgICAgfSk7XG4gICAgfSkub24oJ2Vycm9yJywgZnVuY3Rpb24oKSB7XG4gICAgICByZWplY3QoJ0ZhaWxlZCB0byB2YWxpZGF0ZSB0aGlzIGFjY2VzcyB0b2tlbiB3aXRoIEdvb2dsZS4nKTtcbiAgICB9KTtcbiAgfSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICB2YWxpZGF0ZUFwcElkOiB2YWxpZGF0ZUFwcElkLFxuICB2YWxpZGF0ZUF1dGhEYXRhOiB2YWxpZGF0ZUF1dGhEYXRhXG59O1xuIl19