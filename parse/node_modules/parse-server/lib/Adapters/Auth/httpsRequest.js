'use strict';

const https = require('https');

function makeCallback(resolve, reject, noJSON) {
  return function (res) {
    let data = '';
    res.on('data', chunk => {
      data += chunk;
    });
    res.on('end', () => {
      if (noJSON) {
        return resolve(data);
      }
      try {
        data = JSON.parse(data);
      } catch (e) {
        return reject(e);
      }
      resolve(data);
    });
    res.on('error', reject);
  };
}

function get(options, noJSON = false) {
  return new Promise((resolve, reject) => {
    https.get(options, makeCallback(resolve, reject, noJSON)).on('error', reject);
  });
}

function request(options, postData) {
  return new Promise((resolve, reject) => {
    const req = https.request(options, makeCallback(resolve, reject));
    req.on('error', reject);
    req.write(postData);
    req.end();
  });
}

module.exports = { get, request };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9BZGFwdGVycy9BdXRoL2h0dHBzUmVxdWVzdC5qcyJdLCJuYW1lcyI6WyJodHRwcyIsInJlcXVpcmUiLCJtYWtlQ2FsbGJhY2siLCJyZXNvbHZlIiwicmVqZWN0Iiwibm9KU09OIiwicmVzIiwiZGF0YSIsIm9uIiwiY2h1bmsiLCJKU09OIiwicGFyc2UiLCJlIiwiZ2V0Iiwib3B0aW9ucyIsIlByb21pc2UiLCJyZXF1ZXN0IiwicG9zdERhdGEiLCJyZXEiLCJ3cml0ZSIsImVuZCIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiI7O0FBQUEsTUFBTUEsUUFBUUMsUUFBUSxPQUFSLENBQWQ7O0FBRUEsU0FBU0MsWUFBVCxDQUFzQkMsT0FBdEIsRUFBK0JDLE1BQS9CLEVBQXVDQyxNQUF2QyxFQUErQztBQUM3QyxTQUFPLFVBQVNDLEdBQVQsRUFBYztBQUNuQixRQUFJQyxPQUFPLEVBQVg7QUFDQUQsUUFBSUUsRUFBSixDQUFPLE1BQVAsRUFBZ0JDLEtBQUQsSUFBVztBQUN4QkYsY0FBUUUsS0FBUjtBQUNELEtBRkQ7QUFHQUgsUUFBSUUsRUFBSixDQUFPLEtBQVAsRUFBYyxNQUFNO0FBQ2xCLFVBQUlILE1BQUosRUFBWTtBQUNWLGVBQU9GLFFBQVFJLElBQVIsQ0FBUDtBQUNEO0FBQ0QsVUFBSTtBQUNGQSxlQUFPRyxLQUFLQyxLQUFMLENBQVdKLElBQVgsQ0FBUDtBQUNELE9BRkQsQ0FFRSxPQUFNSyxDQUFOLEVBQVM7QUFDVCxlQUFPUixPQUFPUSxDQUFQLENBQVA7QUFDRDtBQUNEVCxjQUFRSSxJQUFSO0FBQ0QsS0FWRDtBQVdBRCxRQUFJRSxFQUFKLENBQU8sT0FBUCxFQUFnQkosTUFBaEI7QUFDRCxHQWpCRDtBQWtCRDs7QUFFRCxTQUFTUyxHQUFULENBQWFDLE9BQWIsRUFBc0JULFNBQVMsS0FBL0IsRUFBc0M7QUFDcEMsU0FBTyxJQUFJVSxPQUFKLENBQVksQ0FBQ1osT0FBRCxFQUFVQyxNQUFWLEtBQXFCO0FBQ3RDSixVQUNHYSxHQURILENBQ09DLE9BRFAsRUFDZ0JaLGFBQWFDLE9BQWIsRUFBc0JDLE1BQXRCLEVBQThCQyxNQUE5QixDQURoQixFQUVHRyxFQUZILENBRU0sT0FGTixFQUVlSixNQUZmO0FBR0QsR0FKTSxDQUFQO0FBS0Q7O0FBRUQsU0FBU1ksT0FBVCxDQUFpQkYsT0FBakIsRUFBMEJHLFFBQTFCLEVBQW9DO0FBQ2xDLFNBQU8sSUFBSUYsT0FBSixDQUFZLENBQUNaLE9BQUQsRUFBVUMsTUFBVixLQUFxQjtBQUN0QyxVQUFNYyxNQUFNbEIsTUFBTWdCLE9BQU4sQ0FBY0YsT0FBZCxFQUF1QlosYUFBYUMsT0FBYixFQUFzQkMsTUFBdEIsQ0FBdkIsQ0FBWjtBQUNBYyxRQUFJVixFQUFKLENBQU8sT0FBUCxFQUFnQkosTUFBaEI7QUFDQWMsUUFBSUMsS0FBSixDQUFVRixRQUFWO0FBQ0FDLFFBQUlFLEdBQUo7QUFDRCxHQUxNLENBQVA7QUFNRDs7QUFFREMsT0FBT0MsT0FBUCxHQUFpQixFQUFFVCxHQUFGLEVBQU9HLE9BQVAsRUFBakIiLCJmaWxlIjoiaHR0cHNSZXF1ZXN0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgaHR0cHMgPSByZXF1aXJlKCdodHRwcycpO1xuXG5mdW5jdGlvbiBtYWtlQ2FsbGJhY2socmVzb2x2ZSwgcmVqZWN0LCBub0pTT04pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHJlcykge1xuICAgIGxldCBkYXRhID0gJyc7XG4gICAgcmVzLm9uKCdkYXRhJywgKGNodW5rKSA9PiB7XG4gICAgICBkYXRhICs9IGNodW5rO1xuICAgIH0pO1xuICAgIHJlcy5vbignZW5kJywgKCkgPT4ge1xuICAgICAgaWYgKG5vSlNPTikge1xuICAgICAgICByZXR1cm4gcmVzb2x2ZShkYXRhKTtcbiAgICAgIH1cbiAgICAgIHRyeSB7XG4gICAgICAgIGRhdGEgPSBKU09OLnBhcnNlKGRhdGEpO1xuICAgICAgfSBjYXRjaChlKSB7XG4gICAgICAgIHJldHVybiByZWplY3QoZSk7XG4gICAgICB9XG4gICAgICByZXNvbHZlKGRhdGEpO1xuICAgIH0pO1xuICAgIHJlcy5vbignZXJyb3InLCByZWplY3QpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBnZXQob3B0aW9ucywgbm9KU09OID0gZmFsc2UpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICBodHRwc1xuICAgICAgLmdldChvcHRpb25zLCBtYWtlQ2FsbGJhY2socmVzb2x2ZSwgcmVqZWN0LCBub0pTT04pKVxuICAgICAgLm9uKCdlcnJvcicsIHJlamVjdCk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiByZXF1ZXN0KG9wdGlvbnMsIHBvc3REYXRhKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgY29uc3QgcmVxID0gaHR0cHMucmVxdWVzdChvcHRpb25zLCBtYWtlQ2FsbGJhY2socmVzb2x2ZSwgcmVqZWN0KSk7XG4gICAgcmVxLm9uKCdlcnJvcicsIHJlamVjdCk7XG4gICAgcmVxLndyaXRlKHBvc3REYXRhKTtcbiAgICByZXEuZW5kKCk7XG4gIH0pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHsgZ2V0LCByZXF1ZXN0IH07XG4iXX0=