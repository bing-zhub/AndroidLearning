'use strict';

var _https = require('https');

var _https2 = _interopRequireDefault(_https);

var _url = require('url');

var _url2 = _interopRequireDefault(_url);

var _querystring = require('querystring');

var _querystring2 = _interopRequireDefault(_querystring);

var _node = require('parse/node');

var _node2 = _interopRequireDefault(_node);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*
 * This auth adapter is based on the OAuth 2.0 Token Introspection specification.
 * See RFC 7662 for details (https://tools.ietf.org/html/rfc7662).
 * It's purpose is to validate OAuth2 access tokens using the OAuth2 provider's
 * token introspection endpoint (if implemented by the provider).
 *
 * The adapter accepts the following config parameters:
 *
 * 1. "endpoint" (string, required)
 *      The URL of the token introspection endpoint of the OAuth2 provider that
 *      issued the access token to the client that is to be validated.
 *
 * 2. "useridField" (string, optional)
 *      The name of the field in the token introspection response that contains
 *      the userid. If specified, it will be used to verify the value of the "id"
 *      field in the "authData" JSON that is coming from the client.
 *      This can be the "aud" (i.e. audience), the "sub" (i.e. subject) or the
 *      "username" field in the introspection response, but since only the
 *      "active" field is required and all other reponse fields are optional
 *      in the RFC, it has to be optional in this adapter as well.
 *      Default: - (undefined)
 *
 * 3. "appidField" (string, optional)
 *      The name of the field in the token introspection response that contains
 *      the appId of the client. If specified, it will be used to verify it's
 *      value against the set of appIds in the adapter config. The concept of
 *      appIds comes from the two major social login providers
 *      (Google and Facebook). They have not yet implemented the token
 *      introspection endpoint, but the concept can be valid for any OAuth2
 *      provider.
 *      Default: - (undefined)
 *
 * 4. "appIds" (array of strings, optional)
 *      A set of appIds that are used to restrict accepted access tokens based
 *      on a specific field's value in the token introspection response.
 *      Default: - (undefined)
 *
 * 5. "authorizationHeader" (string, optional)
 *      The value of the "Authorization" HTTP header in requests sent to the
 *      introspection endpoint.
 *      Eg. "Basic dXNlcm5hbWU6cGFzc3dvcmQ="
 *
 * 6. "debug" (boolean, optional)
 *      Enables extensive logging using the "verbose" level.
 *
 * The adapter expects requests with the following authData JSON:
 *
 * {
 *   "oauth2": {
 *     "id": "user's OAuth2 provider-specific id as a string",
 *     "access_token": "an authorized OAuth2 access token for the user",
 *   }
 * }
 */

class OAuth2AuthAdapter {
  constructor(name) {
    this.name = name;
  }

  // Returns a promise that fulfills if this user id is valid.
  validateAuthData(authData, options) {
    return requestJson(options, authData.access_token).then(response => {
      if (response && response.active && (!options || !options.hasOwnProperty('useridField') || !options.useridField || authData.id == response[options.useridField])) {
        return Promise.resolve();
      }
      return Promise.reject(new _node2.default.Error(_node2.default.Error.OBJECT_NOT_FOUND, 'OAuth2 access token is invalid for this user.'));
    });
  }

  validateAppId(appIds, authData, options) {
    if (options && options.hasOwnProperty('appidField') && options.appidField) {
      if (!appIds.length) {
        return Promise.reject(new _node2.default.Error(_node2.default.Error.OBJECT_NOT_FOUND, 'OAuth2 configuration is missing the client app IDs ("appIds" config parameter).'));
      }
      return requestJson(options, authData.access_token).then(response => {
        const appidField = options.appidField;
        return validateAppIdResponse(response, appidField, appIds);
      });
    } else {
      return Promise.resolve();
    }
  }
}

function getRequestOptions(config, access_token) {
  if (!config || !config.endpoint) {
    throw new _node2.default.Error(_node2.default.Error.OBJECT_NOT_FOUND, 'OAuth2 token introspection endpoint URL is missing from configuration!');
  }
  const { endpoint } = config;
  const parsedUrl = _url2.default.config(endpoint);
  const postData = _querystring2.default.stringify({
    'token': access_token
  });
  const headers = {
    'Content-Type': 'application/x-www-form-urlencoded',
    'Content-Length': Buffer.byteLength(postData)
    // Note: the "authorizationHeader" adapter config must contain the raw value.
    //   Thus if HTTP Basic authorization is to be used, it must contain the
    //   base64 encoded version of the concatenated <username> + ":" + <password> string.
  };if (config.authorizationHeader) {
    headers['Authorization'] = config.authorizationHeader;
  }
  return {
    data: postData,
    options: {
      hostname: parsedUrl.hostname,
      path: parsedUrl.pathname,
      method: 'POST',
      headers: headers
    }
  };
}

function validateAppIdResponse(response, appidField, appIds) {
  if (response && response[appidField]) {
    const responseValue = response[appidField];
    if (Array.isArray(responseValue)) {
      if (responseValue.find((value, index) => {
        return appIds.includes(index);
      })) {
        return Promise.resolve();
      }
    } else {
      if (appIds.includes(responseValue)) {
        return Promise.resolve();
      }
    }
  }
  return Promise.reject(new _node2.default.Error(_node2.default.Error.OBJECT_NOT_FOUND, 'OAuth2: the access_token\'s appID is empty or is not in the list of permitted appIDs in the auth configuration.'));
}

// A promise wrapper for api requests
function requestJson(config, access_token) {
  return new Promise(function (resolve, reject) {
    const { data, options } = getRequestOptions(config, access_token);
    const postRequest = _https2.default.request(options, function (res) {
      let data = '';
      res.setEncoding('utf8');
      res.on('data', function (chunk) {
        data += chunk;
      });
      res.on('end', function () {
        try {
          return resolve(JSON.parse(data));
        } catch (e) {
          return reject(e);
        }
      });
    }).on('error', function () {
      return reject('Failed to validate access token %s with OAuth2 provider (url = %s, headers = %s)', access_token, options.tokenIntrospectionEndpointUrl, JSON.stringify(options.headers));
    });

    postRequest.write(data);
    postRequest.end();
  });
}

module.exports = { OAuth2AuthAdapter, requestJson, getRequestOptions };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,