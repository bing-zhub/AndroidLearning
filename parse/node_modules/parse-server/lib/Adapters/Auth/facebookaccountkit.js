'use strict';

const crypto = require('crypto');
const https = require('https');
const Parse = require('parse/node').Parse;

const graphRequest = path => {
  return new Promise((resolve, reject) => {
    https.get(`https://graph.accountkit.com/v1.1/${path}`, res => {
      var data = '';
      res.on('data', chunk => {
        data += chunk;
      });
      res.on('end', () => {
        try {
          data = JSON.parse(data);
          if (data.error) {
            // when something wrong with fb graph request (token corrupted etc.)
            // instead of network issue
            reject(data.error);
          } else {
            resolve(data);
          }
        } catch (e) {
          reject(e);
        }
      });
    }).on('error', function () {
      reject('Failed to validate this access token with Facebook Account Kit.');
    });
  });
};

function getRequestPath(authData, options) {
  const access_token = authData.access_token,
        appSecret = options && options.appSecret;
  if (appSecret) {
    const appsecret_proof = crypto.createHmac("sha256", appSecret).update(access_token).digest('hex');
    return `me?access_token=${access_token}&appsecret_proof=${appsecret_proof}`;
  }
  return `me?access_token=${access_token}`;
}

function validateAppId(appIds, authData, options) {
  if (!appIds.length) {
    return Promise.reject(new Parse.Error(Parse.Error.OBJECT_NOT_FOUND, 'Facebook app id for Account Kit is not configured.'));
  }
  return graphRequest(getRequestPath(authData, options)).then(data => {
    if (data && data.application && appIds.indexOf(data.application.id) != -1) {
      return;
    }
    throw new Parse.Error(Parse.Error.OBJECT_NOT_FOUND, 'Facebook app id for Account Kit is invalid for this user.');
  });
}

function validateAuthData(authData, options) {
  return graphRequest(getRequestPath(authData, options)).then(data => {
    if (data && data.id == authData.id) {
      return;
    }
    throw new Parse.Error(Parse.Error.OBJECT_NOT_FOUND, 'Facebook Account Kit auth is invalid for this user.');
  });
}

module.exports = {
  validateAppId,
  validateAuthData
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9BZGFwdGVycy9BdXRoL2ZhY2Vib29rYWNjb3VudGtpdC5qcyJdLCJuYW1lcyI6WyJjcnlwdG8iLCJyZXF1aXJlIiwiaHR0cHMiLCJQYXJzZSIsImdyYXBoUmVxdWVzdCIsInBhdGgiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsImdldCIsInJlcyIsImRhdGEiLCJvbiIsImNodW5rIiwiSlNPTiIsInBhcnNlIiwiZXJyb3IiLCJlIiwiZ2V0UmVxdWVzdFBhdGgiLCJhdXRoRGF0YSIsIm9wdGlvbnMiLCJhY2Nlc3NfdG9rZW4iLCJhcHBTZWNyZXQiLCJhcHBzZWNyZXRfcHJvb2YiLCJjcmVhdGVIbWFjIiwidXBkYXRlIiwiZGlnZXN0IiwidmFsaWRhdGVBcHBJZCIsImFwcElkcyIsImxlbmd0aCIsIkVycm9yIiwiT0JKRUNUX05PVF9GT1VORCIsInRoZW4iLCJhcHBsaWNhdGlvbiIsImluZGV4T2YiLCJpZCIsInZhbGlkYXRlQXV0aERhdGEiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiOztBQUFBLE1BQU1BLFNBQVNDLFFBQVEsUUFBUixDQUFmO0FBQ0EsTUFBTUMsUUFBUUQsUUFBUSxPQUFSLENBQWQ7QUFDQSxNQUFNRSxRQUFTRixRQUFRLFlBQVIsRUFBc0JFLEtBQXJDOztBQUVBLE1BQU1DLGVBQWdCQyxJQUFELElBQVU7QUFDN0IsU0FBTyxJQUFJQyxPQUFKLENBQVksQ0FBQ0MsT0FBRCxFQUFVQyxNQUFWLEtBQXFCO0FBQ3RDTixVQUFNTyxHQUFOLENBQVcscUNBQW9DSixJQUFLLEVBQXBELEVBQXdESyxHQUFELElBQVM7QUFDOUQsVUFBSUMsT0FBTyxFQUFYO0FBQ0FELFVBQUlFLEVBQUosQ0FBTyxNQUFQLEVBQWdCQyxLQUFELElBQVc7QUFDeEJGLGdCQUFRRSxLQUFSO0FBQ0QsT0FGRDtBQUdBSCxVQUFJRSxFQUFKLENBQU8sS0FBUCxFQUFjLE1BQU07QUFDbEIsWUFBSTtBQUNGRCxpQkFBT0csS0FBS0MsS0FBTCxDQUFXSixJQUFYLENBQVA7QUFDQSxjQUFJQSxLQUFLSyxLQUFULEVBQWdCO0FBQ2Q7QUFDQTtBQUNBUixtQkFBT0csS0FBS0ssS0FBWjtBQUNELFdBSkQsTUFJTztBQUNMVCxvQkFBUUksSUFBUjtBQUNEO0FBQ0YsU0FURCxDQVNFLE9BQU9NLENBQVAsRUFBVTtBQUNWVCxpQkFBT1MsQ0FBUDtBQUNEO0FBQ0YsT0FiRDtBQWNELEtBbkJELEVBbUJHTCxFQW5CSCxDQW1CTSxPQW5CTixFQW1CZSxZQUFZO0FBQ3pCSixhQUFPLGlFQUFQO0FBQ0QsS0FyQkQ7QUFzQkQsR0F2Qk0sQ0FBUDtBQXdCRCxDQXpCRDs7QUEyQkEsU0FBU1UsY0FBVCxDQUF3QkMsUUFBeEIsRUFBa0NDLE9BQWxDLEVBQTJDO0FBQ3pDLFFBQU1DLGVBQWVGLFNBQVNFLFlBQTlCO0FBQUEsUUFBNENDLFlBQVlGLFdBQVdBLFFBQVFFLFNBQTNFO0FBQ0EsTUFBSUEsU0FBSixFQUFlO0FBQ2IsVUFBTUMsa0JBQWtCdkIsT0FBT3dCLFVBQVAsQ0FBa0IsUUFBbEIsRUFBNEJGLFNBQTVCLEVBQXVDRyxNQUF2QyxDQUE4Q0osWUFBOUMsRUFBNERLLE1BQTVELENBQW1FLEtBQW5FLENBQXhCO0FBQ0EsV0FBUSxtQkFBa0JMLFlBQWEsb0JBQW1CRSxlQUFnQixFQUExRTtBQUNEO0FBQ0QsU0FBUSxtQkFBa0JGLFlBQWEsRUFBdkM7QUFDRDs7QUFFRCxTQUFTTSxhQUFULENBQXVCQyxNQUF2QixFQUErQlQsUUFBL0IsRUFBeUNDLE9BQXpDLEVBQWtEO0FBQ2hELE1BQUksQ0FBQ1EsT0FBT0MsTUFBWixFQUFvQjtBQUNsQixXQUFPdkIsUUFBUUUsTUFBUixDQUNMLElBQUlMLE1BQU0yQixLQUFWLENBQ0UzQixNQUFNMkIsS0FBTixDQUFZQyxnQkFEZCxFQUVFLG9EQUZGLENBREssQ0FBUDtBQUtEO0FBQ0QsU0FBTzNCLGFBQWFjLGVBQWVDLFFBQWYsRUFBeUJDLE9BQXpCLENBQWIsRUFDSlksSUFESSxDQUNDckIsUUFBUTtBQUNaLFFBQUlBLFFBQVFBLEtBQUtzQixXQUFiLElBQTRCTCxPQUFPTSxPQUFQLENBQWV2QixLQUFLc0IsV0FBTCxDQUFpQkUsRUFBaEMsS0FBdUMsQ0FBQyxDQUF4RSxFQUEyRTtBQUN6RTtBQUNEO0FBQ0QsVUFBTSxJQUFJaEMsTUFBTTJCLEtBQVYsQ0FDSjNCLE1BQU0yQixLQUFOLENBQVlDLGdCQURSLEVBRUosMkRBRkksQ0FBTjtBQUdELEdBUkksQ0FBUDtBQVNEOztBQUVELFNBQVNLLGdCQUFULENBQTBCakIsUUFBMUIsRUFBb0NDLE9BQXBDLEVBQTZDO0FBQzNDLFNBQU9oQixhQUFhYyxlQUFlQyxRQUFmLEVBQXlCQyxPQUF6QixDQUFiLEVBQ0pZLElBREksQ0FDQ3JCLFFBQVE7QUFDWixRQUFJQSxRQUFRQSxLQUFLd0IsRUFBTCxJQUFXaEIsU0FBU2dCLEVBQWhDLEVBQW9DO0FBQ2xDO0FBQ0Q7QUFDRCxVQUFNLElBQUloQyxNQUFNMkIsS0FBVixDQUNKM0IsTUFBTTJCLEtBQU4sQ0FBWUMsZ0JBRFIsRUFFSixxREFGSSxDQUFOO0FBR0QsR0FSSSxDQUFQO0FBU0Q7O0FBRURNLE9BQU9DLE9BQVAsR0FBaUI7QUFDZlgsZUFEZTtBQUVmUztBQUZlLENBQWpCIiwiZmlsZSI6ImZhY2Vib29rYWNjb3VudGtpdC5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGNyeXB0byA9IHJlcXVpcmUoJ2NyeXB0bycpO1xuY29uc3QgaHR0cHMgPSByZXF1aXJlKCdodHRwcycpO1xuY29uc3QgUGFyc2UgID0gcmVxdWlyZSgncGFyc2Uvbm9kZScpLlBhcnNlO1xuXG5jb25zdCBncmFwaFJlcXVlc3QgPSAocGF0aCkgPT4ge1xuICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIGh0dHBzLmdldChgaHR0cHM6Ly9ncmFwaC5hY2NvdW50a2l0LmNvbS92MS4xLyR7cGF0aH1gLCAocmVzKSA9PiB7XG4gICAgICB2YXIgZGF0YSA9ICcnO1xuICAgICAgcmVzLm9uKCdkYXRhJywgKGNodW5rKSA9PiB7XG4gICAgICAgIGRhdGEgKz0gY2h1bms7XG4gICAgICB9KTtcbiAgICAgIHJlcy5vbignZW5kJywgKCkgPT4ge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGRhdGEgPSBKU09OLnBhcnNlKGRhdGEpO1xuICAgICAgICAgIGlmIChkYXRhLmVycm9yKSB7XG4gICAgICAgICAgICAvLyB3aGVuIHNvbWV0aGluZyB3cm9uZyB3aXRoIGZiIGdyYXBoIHJlcXVlc3QgKHRva2VuIGNvcnJ1cHRlZCBldGMuKVxuICAgICAgICAgICAgLy8gaW5zdGVhZCBvZiBuZXR3b3JrIGlzc3VlXG4gICAgICAgICAgICByZWplY3QoZGF0YS5lcnJvcik7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlc29sdmUoZGF0YSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgcmVqZWN0KGUpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KS5vbignZXJyb3InLCBmdW5jdGlvbiAoKSB7XG4gICAgICByZWplY3QoJ0ZhaWxlZCB0byB2YWxpZGF0ZSB0aGlzIGFjY2VzcyB0b2tlbiB3aXRoIEZhY2Vib29rIEFjY291bnQgS2l0LicpO1xuICAgIH0pO1xuICB9KTtcbn07XG5cbmZ1bmN0aW9uIGdldFJlcXVlc3RQYXRoKGF1dGhEYXRhLCBvcHRpb25zKSB7XG4gIGNvbnN0IGFjY2Vzc190b2tlbiA9IGF1dGhEYXRhLmFjY2Vzc190b2tlbiwgYXBwU2VjcmV0ID0gb3B0aW9ucyAmJiBvcHRpb25zLmFwcFNlY3JldDtcbiAgaWYgKGFwcFNlY3JldCkge1xuICAgIGNvbnN0IGFwcHNlY3JldF9wcm9vZiA9IGNyeXB0by5jcmVhdGVIbWFjKFwic2hhMjU2XCIsIGFwcFNlY3JldCkudXBkYXRlKGFjY2Vzc190b2tlbikuZGlnZXN0KCdoZXgnKTtcbiAgICByZXR1cm4gYG1lP2FjY2Vzc190b2tlbj0ke2FjY2Vzc190b2tlbn0mYXBwc2VjcmV0X3Byb29mPSR7YXBwc2VjcmV0X3Byb29mfWBcbiAgfVxuICByZXR1cm4gYG1lP2FjY2Vzc190b2tlbj0ke2FjY2Vzc190b2tlbn1gO1xufVxuXG5mdW5jdGlvbiB2YWxpZGF0ZUFwcElkKGFwcElkcywgYXV0aERhdGEsIG9wdGlvbnMpIHtcbiAgaWYgKCFhcHBJZHMubGVuZ3RoKSB7XG4gICAgcmV0dXJuIFByb21pc2UucmVqZWN0KFxuICAgICAgbmV3IFBhcnNlLkVycm9yKFxuICAgICAgICBQYXJzZS5FcnJvci5PQkpFQ1RfTk9UX0ZPVU5ELFxuICAgICAgICAnRmFjZWJvb2sgYXBwIGlkIGZvciBBY2NvdW50IEtpdCBpcyBub3QgY29uZmlndXJlZC4nKVxuICAgIClcbiAgfVxuICByZXR1cm4gZ3JhcGhSZXF1ZXN0KGdldFJlcXVlc3RQYXRoKGF1dGhEYXRhLCBvcHRpb25zKSlcbiAgICAudGhlbihkYXRhID0+IHtcbiAgICAgIGlmIChkYXRhICYmIGRhdGEuYXBwbGljYXRpb24gJiYgYXBwSWRzLmluZGV4T2YoZGF0YS5hcHBsaWNhdGlvbi5pZCkgIT0gLTEpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdGhyb3cgbmV3IFBhcnNlLkVycm9yKFxuICAgICAgICBQYXJzZS5FcnJvci5PQkpFQ1RfTk9UX0ZPVU5ELFxuICAgICAgICAnRmFjZWJvb2sgYXBwIGlkIGZvciBBY2NvdW50IEtpdCBpcyBpbnZhbGlkIGZvciB0aGlzIHVzZXIuJyk7XG4gICAgfSlcbn1cblxuZnVuY3Rpb24gdmFsaWRhdGVBdXRoRGF0YShhdXRoRGF0YSwgb3B0aW9ucykge1xuICByZXR1cm4gZ3JhcGhSZXF1ZXN0KGdldFJlcXVlc3RQYXRoKGF1dGhEYXRhLCBvcHRpb25zKSlcbiAgICAudGhlbihkYXRhID0+IHtcbiAgICAgIGlmIChkYXRhICYmIGRhdGEuaWQgPT0gYXV0aERhdGEuaWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdGhyb3cgbmV3IFBhcnNlLkVycm9yKFxuICAgICAgICBQYXJzZS5FcnJvci5PQkpFQ1RfTk9UX0ZPVU5ELFxuICAgICAgICAnRmFjZWJvb2sgQWNjb3VudCBLaXQgYXV0aCBpcyBpbnZhbGlkIGZvciB0aGlzIHVzZXIuJyk7XG4gICAgfSlcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHZhbGlkYXRlQXBwSWQsXG4gIHZhbGlkYXRlQXV0aERhdGFcbn07XG4iXX0=