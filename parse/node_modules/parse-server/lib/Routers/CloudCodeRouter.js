'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CloudCodeRouter = undefined;

var _PromiseRouter = require('../PromiseRouter');

var _PromiseRouter2 = _interopRequireDefault(_PromiseRouter);

var _node = require('parse/node');

var _node2 = _interopRequireDefault(_node);

var _rest = require('../rest');

var _rest2 = _interopRequireDefault(_rest);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const triggers = require('../triggers');
const middleware = require('../middlewares');

function formatJobSchedule(job_schedule) {
  if (typeof job_schedule.startAfter === 'undefined') {
    job_schedule.startAfter = new Date().toISOString();
  }
  return job_schedule;
}

function validateJobSchedule(config, job_schedule) {
  const jobs = triggers.getJobs(config.applicationId) || {};
  if (job_schedule.jobName && !jobs[job_schedule.jobName]) {
    throw new _node2.default.Error(_node2.default.Error.INTERNAL_SERVER_ERROR, 'Cannot Schedule a job that is not deployed');
  }
}

class CloudCodeRouter extends _PromiseRouter2.default {
  mountRoutes() {
    this.route('GET', '/cloud_code/jobs', middleware.promiseEnforceMasterKeyAccess, CloudCodeRouter.getJobs);
    this.route('GET', '/cloud_code/jobs/data', middleware.promiseEnforceMasterKeyAccess, CloudCodeRouter.getJobsData);
    this.route('POST', '/cloud_code/jobs', middleware.promiseEnforceMasterKeyAccess, CloudCodeRouter.createJob);
    this.route('PUT', '/cloud_code/jobs/:objectId', middleware.promiseEnforceMasterKeyAccess, CloudCodeRouter.editJob);
    this.route('DELETE', '/cloud_code/jobs/:objectId', middleware.promiseEnforceMasterKeyAccess, CloudCodeRouter.deleteJob);
  }

  static getJobs(req) {
    return _rest2.default.find(req.config, req.auth, '_JobSchedule', {}, {}).then(scheduledJobs => {
      return {
        response: scheduledJobs.results
      };
    });
  }

  static getJobsData(req) {
    const config = req.config;
    const jobs = triggers.getJobs(config.applicationId) || {};
    return _rest2.default.find(req.config, req.auth, '_JobSchedule', {}, {}).then(scheduledJobs => {
      return {
        response: {
          in_use: scheduledJobs.results.map(job => job.jobName),
          jobs: Object.keys(jobs)
        }
      };
    });
  }

  static createJob(req) {
    const { job_schedule } = req.body;
    validateJobSchedule(req.config, job_schedule);
    return _rest2.default.create(req.config, req.auth, '_JobSchedule', formatJobSchedule(job_schedule), req.client);
  }

  static editJob(req) {
    const { objectId } = req.params;
    const { job_schedule } = req.body;
    validateJobSchedule(req.config, job_schedule);
    return _rest2.default.update(req.config, req.auth, '_JobSchedule', { objectId }, formatJobSchedule(job_schedule)).then(response => {
      return {
        response
      };
    });
  }

  static deleteJob(req) {
    const { objectId } = req.params;
    return _rest2.default.del(req.config, req.auth, '_JobSchedule', objectId).then(response => {
      return {
        response
      };
    });
  }
}
exports.CloudCodeRouter = CloudCodeRouter;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9Sb3V0ZXJzL0Nsb3VkQ29kZVJvdXRlci5qcyJdLCJuYW1lcyI6WyJ0cmlnZ2VycyIsInJlcXVpcmUiLCJtaWRkbGV3YXJlIiwiZm9ybWF0Sm9iU2NoZWR1bGUiLCJqb2Jfc2NoZWR1bGUiLCJzdGFydEFmdGVyIiwiRGF0ZSIsInRvSVNPU3RyaW5nIiwidmFsaWRhdGVKb2JTY2hlZHVsZSIsImNvbmZpZyIsImpvYnMiLCJnZXRKb2JzIiwiYXBwbGljYXRpb25JZCIsImpvYk5hbWUiLCJQYXJzZSIsIkVycm9yIiwiSU5URVJOQUxfU0VSVkVSX0VSUk9SIiwiQ2xvdWRDb2RlUm91dGVyIiwiUHJvbWlzZVJvdXRlciIsIm1vdW50Um91dGVzIiwicm91dGUiLCJwcm9taXNlRW5mb3JjZU1hc3RlcktleUFjY2VzcyIsImdldEpvYnNEYXRhIiwiY3JlYXRlSm9iIiwiZWRpdEpvYiIsImRlbGV0ZUpvYiIsInJlcSIsInJlc3QiLCJmaW5kIiwiYXV0aCIsInRoZW4iLCJzY2hlZHVsZWRKb2JzIiwicmVzcG9uc2UiLCJyZXN1bHRzIiwiaW5fdXNlIiwibWFwIiwiam9iIiwiT2JqZWN0Iiwia2V5cyIsImJvZHkiLCJjcmVhdGUiLCJjbGllbnQiLCJvYmplY3RJZCIsInBhcmFtcyIsInVwZGF0ZSIsImRlbCJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOzs7O0FBQ0E7Ozs7QUFDQTs7Ozs7O0FBQ0EsTUFBTUEsV0FBa0JDLFFBQVEsYUFBUixDQUF4QjtBQUNBLE1BQU1DLGFBQWtCRCxRQUFRLGdCQUFSLENBQXhCOztBQUVBLFNBQVNFLGlCQUFULENBQTJCQyxZQUEzQixFQUF5QztBQUN2QyxNQUFJLE9BQU9BLGFBQWFDLFVBQXBCLEtBQW1DLFdBQXZDLEVBQW9EO0FBQ2xERCxpQkFBYUMsVUFBYixHQUEwQixJQUFJQyxJQUFKLEdBQVdDLFdBQVgsRUFBMUI7QUFDRDtBQUNELFNBQU9ILFlBQVA7QUFDRDs7QUFFRCxTQUFTSSxtQkFBVCxDQUE2QkMsTUFB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aEIsRUFBd0JpQixJQUFJRyxJQUE1QixFQUFrQyxjQUFsQyxFQUFrRCxFQUFFYSxRQUFGLEVBQWxELEVBQWdFdkMsa0JBQWtCQyxZQUFsQixDQUFoRSxFQUFpRzBCLElBQWpHLENBQXVHRSxRQUFELElBQWM7QUFDekgsYUFBTztBQUNMQTtBQURLLE9BQVA7QUFHRCxLQUpNLENBQVA7QUFLRDs7QUFFRCxTQUFPUCxTQUFQLENBQWlCQyxHQUFqQixFQUFzQjtBQUNwQixVQUFNLEVBQUVnQixRQUFGLEtBQWVoQixJQUFJaUIsTUFBekI7QUFDQSxXQUFPaEIsZUFBS2tCLEdBQUwsQ0FBU25CLElBQUlqQixNQUFiLEVBQXFCaUIsSUFBSUcsSUFBekIsRUFBK0IsY0FBL0IsRUFBK0NhLFFBQS9DLEVBQXlEWixJQUF6RCxDQUErREUsUUFBRCxJQUFjO0FBQ2pGLGFBQU87QUFDTEE7QUFESyxPQUFQO0FBR0QsS0FKTSxDQUFQO0FBS0Q7QUF0RGdEO1FBQXRDZixlLEdBQUFBLGUiLCJmaWxlIjoiQ2xvdWRDb2RlUm91dGVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFByb21pc2VSb3V0ZXIgIGZyb20gJy4uL1Byb21pc2VSb3V0ZXInO1xuaW1wb3J0IFBhcnNlICAgICAgICAgIGZyb20gJ3BhcnNlL25vZGUnO1xuaW1wb3J0IHJlc3QgICAgICAgICAgIGZyb20gJy4uL3Jlc3QnO1xuY29uc3QgdHJpZ2dlcnMgICAgICAgID0gcmVxdWlyZSgnLi4vdHJpZ2dlcnMnKTtcbmNvbnN0IG1pZGRsZXdhcmUgICAgICA9IHJlcXVpcmUoJy4uL21pZGRsZXdhcmVzJyk7XG5cbmZ1bmN0aW9uIGZvcm1hdEpvYlNjaGVkdWxlKGpvYl9zY2hlZHVsZSkge1xuICBpZiAodHlwZW9mIGpvYl9zY2hlZHVsZS5zdGFydEFmdGVyID09PSAndW5kZWZpbmVkJykge1xuICAgIGpvYl9zY2hlZHVsZS5zdGFydEFmdGVyID0gbmV3IERhdGUoKS50b0lTT1N0cmluZygpO1xuICB9XG4gIHJldHVybiBqb2Jfc2NoZWR1bGU7XG59XG5cbmZ1bmN0aW9uIHZhbGlkYXRlSm9iU2NoZWR1bGUoY29uZmlnLCBqb2Jfc2NoZWR1bGUpIHtcbiAgY29uc3Qgam9icyA9IHRyaWdnZXJzLmdldEpvYnMoY29uZmlnLmFwcGxpY2F0aW9uSWQpIHx8IHt9O1xuICBpZiAoam9iX3NjaGVkdWxlLmpvYk5hbWUgJiYgIWpvYnNbam9iX3NjaGVkdWxlLmpvYk5hbWVdKSB7XG4gICAgdGhyb3cgbmV3IFBhcnNlLkVycm9yKFBhcnNlLkVycm9yLklOVEVSTkFMX1NFUlZFUl9FUlJPUiwgJ0Nhbm5vdCBTY2hlZHVsZSBhIGpvYiB0aGF0IGlzIG5vdCBkZXBsb3llZCcpO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBDbG91ZENvZGVSb3V0ZXIgZXh0ZW5kcyBQcm9taXNlUm91dGVyIHtcbiAgbW91bnRSb3V0ZXMoKSB7XG4gICAgdGhpcy5yb3V0ZSgnR0VUJywgJy9jbG91ZF9jb2RlL2pvYnMnLCBtaWRkbGV3YXJlLnByb21pc2VFbmZvcmNlTWFzdGVyS2V5QWNjZXNzLCBDbG91ZENvZGVSb3V0ZXIuZ2V0Sm9icyk7XG4gICAgdGhpcy5yb3V0ZSgnR0VUJywgJy9jbG91ZF9jb2RlL2pvYnMvZGF0YScsIG1pZGRsZXdhcmUucHJvbWlzZUVuZm9yY2VNYXN0ZXJLZXlBY2Nlc3MsIENsb3VkQ29kZVJvdXRlci5nZXRKb2JzRGF0YSk7XG4gICAgdGhpcy5yb3V0ZSgnUE9TVCcsICcvY2xvdWRfY29kZS9qb2JzJywgbWlkZGxld2FyZS5wcm9taXNlRW5mb3JjZU1hc3RlcktleUFjY2VzcywgQ2xvdWRDb2RlUm91dGVyLmNyZWF0ZUpvYik7XG4gICAgdGhpcy5yb3V0ZSgnUFVUJywgJy9jbG91ZF9jb2RlL2pvYnMvOm9iamVjdElkJywgbWlkZGxld2FyZS5wcm9taXNlRW5mb3JjZU1hc3RlcktleUFjY2VzcywgQ2xvdWRDb2RlUm91dGVyLmVkaXRKb2IpO1xuICAgIHRoaXMucm91dGUoJ0RFTEVURScsICcvY2xvdWRfY29kZS9qb2JzLzpvYmplY3RJZCcsIG1pZGRsZXdhcmUucHJvbWlzZUVuZm9yY2VNYXN0ZXJLZXlBY2Nlc3MsIENsb3VkQ29kZVJvdXRlci5kZWxldGVKb2IpO1xuICB9XG5cbiAgc3RhdGljIGdldEpvYnMocmVxKSB7XG4gICAgcmV0dXJuIHJlc3QuZmluZChyZXEuY29uZmlnLCByZXEuYXV0aCwgJ19Kb2JTY2hlZHVsZScsIHt9LCB7fSkudGhlbigoc2NoZWR1bGVkSm9icykgPT4ge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcmVzcG9uc2U6IHNjaGVkdWxlZEpvYnMucmVzdWx0c1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgc3RhdGljIGdldEpvYnNEYXRhKHJlcSkge1xuICAgIGNvbnN0IGNvbmZpZyA9IHJlcS5jb25maWc7XG4gICAgY29uc3Qgam9icyA9IHRyaWdnZXJzLmdldEpvYnMoY29uZmlnLmFwcGxpY2F0aW9uSWQpIHx8IHt9O1xuICAgIHJldHVybiByZXN0LmZpbmQocmVxLmNvbmZpZywgcmVxLmF1dGgsICdfSm9iU2NoZWR1bGUnLCB7fSwge30pLnRoZW4oKHNjaGVkdWxlZEpvYnMpID0+IHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHJlc3BvbnNlOiB7XG4gICAgICAgICAgaW5fdXNlOiBzY2hlZHVsZWRKb2JzLnJlc3VsdHMubWFwKChqb2IpID0+IGpvYi5qb2JOYW1lKSxcbiAgICAgICAgICBqb2JzOiBPYmplY3Qua2V5cyhqb2JzKSxcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9KTtcbiAgfVxuXG4gIHN0YXRpYyBjcmVhdGVKb2IocmVxKSB7XG4gICAgY29uc3QgeyBqb2Jfc2NoZWR1bGUgfSA9IHJlcS5ib2R5O1xuICAgIHZhbGlkYXRlSm9iU2NoZWR1bGUocmVxLmNvbmZpZywgam9iX3NjaGVkdWxlKTtcbiAgICByZXR1cm4gcmVzdC5jcmVhdGUocmVxLmNvbmZpZywgcmVxLmF1dGgsICdfSm9iU2NoZWR1bGUnLCBmb3JtYXRKb2JTY2hlZHVsZShqb2Jfc2NoZWR1bGUpLCByZXEuY2xpZW50KTtcbiAgfVxuXG4gIHN0YXRpYyBlZGl0Sm9iKHJlcSkge1xuICAgIGNvbnN0IHsgb2JqZWN0SWQgfSA9IHJlcS5wYXJhbXM7XG4gICAgY29uc3QgeyBqb2Jfc2NoZWR1bGUgfSA9IHJlcS5ib2R5O1xuICAgIHZhbGlkYXRlSm9iU2NoZWR1bGUocmVxLmNvbmZpZywgam9iX3NjaGVkdWxlKTtcbiAgICByZXR1cm4gcmVzdC51cGRhdGUocmVxLmNvbmZpZywgcmVxLmF1dGgsICdfSm9iU2NoZWR1bGUnLCB7IG9iamVjdElkIH0sIGZvcm1hdEpvYlNjaGVkdWxlKGpvYl9zY2hlZHVsZSkpLnRoZW4oKHJlc3BvbnNlKSA9PiB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICByZXNwb25zZVxuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgc3RhdGljIGRlbGV0ZUpvYihyZXEpIHtcbiAgICBjb25zdCB7IG9iamVjdElkIH0gPSByZXEucGFyYW1zO1xuICAgIHJldHVybiByZXN0LmRlbChyZXEuY29uZmlnLCByZXEuYXV0aCwgJ19Kb2JTY2hlZHVsZScsIG9iamVjdElkKS50aGVuKChyZXNwb25zZSkgPT4ge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcmVzcG9uc2VcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufVxuIl19